/*!
 * Copyright (C) 2018 Sindre T. Strøm
 * 
 * This file is part of Strum-2D.
 * 
 * Strum-2D is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Strum-2D is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Strum-2D.  If not, see <http://www.gnu.org/licenses/>.
 */
window.Strum2d=function(t){var e={};function __webpack_require__(i){if(e[i])return e[i].exports;var n=e[i]={i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,__webpack_require__),n.l=!0,n.exports}return __webpack_require__.m=t,__webpack_require__.c=e,__webpack_require__.d=function(t,e,i){__webpack_require__.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},__webpack_require__.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return __webpack_require__.d(e,"a",e),e},__webpack_require__.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="./out/index.js")}({"./out/BrowserWarning.js":function(t,e,i){"use strict";i.r(e),i.d(e,"BrowserWarning",function(){return p});var n,o=i("./out/game/Scene.js"),s=i("./out/game/ui/Layout.js"),r=i("./out/game/ui/TextArea.js"),a=i("./out/game/ui/Label.js"),u=i("./out/game/ui/Button.js"),h=i("./out/game/ui/Panel.js"),c=i("./out/engine/Main.js"),l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),p=function(t){function BrowserWarning(){var e=t.call(this)||this;return e.overlay=!0,e.mutable=!0,e.visible=!0,e}return l(BrowserWarning,t),BrowserWarning.prototype.initScene=function(){var t=this,e=new h.Panel(c.Main.CANVAS_WIDTH,c.Main.CANVAS_HEIGHT);e.z=Number.MAX_SAFE_INTEGER-100,e.setOpacity(.6),e.setPrimaryColor("#000000"),c.Main.canvasBounds.addTransformListener(function(){e.setWidth(c.Main.canvasBounds.width),e.setHeight(c.Main.canvasBounds.height)}),this.addUiElement(e);var i=new s.Layout;i.z=e.z+1,i.setFloat(s.LayoutFloat.CENTER_H,s.LayoutFloat.CENTER_V),i.setLayoutDirection(s.LayoutDirection.VERTICAL),i.setAlignItems(s.LayoutAlignment.CENTER),i.drawBackground=!0,i.setShadowBlur(36),i.setMargin(20),this.addUiElement(i);var n=new a.Label("Hold on!");n.setFont("Roboto Bold",36),n.setTextColor("#fefefe"),i.addComponent(n);var o=new r.TextArea;o.setFont("Roboto",16),o.setLineHeight(1.2),o.setTextColor("#fefefe"),o.setText("Strum2D is currently in early development. Unfortunately this \nmeans it has limited cross-browser support. At the moment, \nthe framework is only optimized for Chromium based browsers. \nFor the optimal experience, please reopen this application \nin one of the following browsers: \n - Google Chrome \n - Opera \n - Vivaldi \n - (any other Chromium based browser)"),i.addComponent(o);var l=new u.Button;l.setText("IGNORE"),l.getMouseHandler().mouseLeftUp=function(){t.dispose()},i.addComponent(l)},BrowserWarning.prototype.load=function(){},BrowserWarning.prototype.tick=function(){},BrowserWarning}(o.Scene)},"./out/DebugUi.js":function(t,e,i){"use strict";i.r(e),i.d(e,"DebugUi",function(){return f});var n,o=i("./out/util/MouseHandler.js"),s=i("./out/game/ui/TextArea.js"),r=i("./out/util/Utils.js"),a=i("./out/engine/Main.js"),u=i("./out/game/ui/Composite.js"),h=i("./out/game/ui/InputField.js"),c=i("./out/game/ui/Button.js"),l=i("./out/game/ui/Layout.js"),p=i("./out/game/ui/TextModule.js"),d=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),f=function(t){function DebugUi(){var e=t.call(this)||this;return e.sceneSetup(),e}return d(DebugUi,t),DebugUi.prototype.sceneSetup=function(){var t=new s.TextArea;t.setFont("Source Code Pro",12),t.setTextColor("#fefefe"),t.setShadowBlur(2,1,1),t.setMarginLeft(5),t.update=function(){var t=r.Utils.getWorldPos(),e="fps: "+a.Main.fps+" tps: "+a.Main.tps+" dpf: "+a.Main.dpf+"\npaused("+a.Main.paused+")\nuiPos"+r.Utils.getMousePos().toString(0)+"\nworldPos"+t.toString(0)+"\ncameraTransform(x:"+a.Main.camera.x.toFixed(1)+", y:"+a.Main.camera.y.toFixed(1)+", rotation:"+a.Main.camera.rotation.toFixed(1)+", zoom:"+a.Main.camera.zoom.toFixed(1)+", zoomStep:"+a.Main.camera.zoomStep.toFixed(2)+")\n";a.Main.player&&(e+="playerTransform(x: "+a.Main.player.x.toFixed(1)+" y: "+a.Main.player.y.toFixed(1)+", vx: "+a.Main.player.vx.toFixed(1)+" vy: "+a.Main.player.vy.toFixed(1)+")\nonGround("+a.Main.player.onGround+")\n"),this.setText(e)},this.addComponent(t);var e=new l.Layout;e.setShadowBlur(30),e.setLayoutDirection(l.LayoutDirection.VERTICAL),e.setFloat(l.LayoutFloat.TOP,l.LayoutFloat.RIGHT),e.addConstraint(l.LayoutConstraint.BOTTOM,a.Main.canvasBounds,l.LayoutConstraint.BOTTOM),e.setMarginTop(12),e.setMarginBottom(12),e.setMarginLeft(20),e.setMarginRight(20),e.drawBackground=!0,this.addComponent(e);var i=new h.InputField;i.setFont("Roboto"),i.setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus accumsan condimentum sem. Mauris eros sem, elementum a risus quis, pharetra sodales sapien."),e.addComponent(i);var n=new h.InputField;n.setPlaceholder("rtl"),n.setTextAlignment(p.TextAlignment.RIGHT_TO_LEFT),e.addComponent(n);var u=new h.InputField;u.setLabel("number"),u.setFilter(/[0-9.\-]/),u.setTextAlignment(p.TextAlignment.RIGHT_TO_LEFT),u.setBorderRadius(3),u.setShadowBlur(8,0,3),e.addComponent(u);var d=new h.InputField;d.setLabel("height"),d.setTextAlignment(p.TextAlignment.RIGHT_TO_LEFT),d.setText("380"),e.addComponent(d);var f=new c.Button;f.getMouseHandler().mouseLeftUp=function(t){console.log("Clicked!")},e.addComponent(f);var y=0;a.Main.canvasBounds.getMouseHandler().mouseMiddleDown=function(t){a.Main.debugMode&&(y=a.Main.camera.rotation)},a.Main.canvasBounds.getMouseHandler().mouseDragging=function(t){a.Main.debugMode&&t.buttons.forEach(function(e,i){if(e==o.MouseButton.MOUSE_MIDDLE){var n=t.origins[i];a.Main.camera.setRotation(y+(t.point.x-n.x)/10)}})},e.setVisible(!1),this.setVisible(!1)},DebugUi}(u.Composite)},"./out/Splash.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Splash",function(){return c});var n,o=i("./out/game/ui/Label.js"),s=i("./out/game/ui/RasterPanel.js"),r=i("./out/engine/Main.js"),a=i("./out/game/ui/Layout.js"),u=i("./out/game/Scene.js"),h=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),c=function(t){function Splash(){var e=t.call(this)||this;return e.duration=3e3,e.start=0,e.visible=!0,e.mutable=!1,e.overlay=!1,e}return h(Splash,t),Splash.prototype.load=function(){this.start=performance.now()},Splash.prototype.initScene=function(){var t=this,e=new a.Layout;e.setLayoutDirection(a.LayoutDirection.VERTICAL),e.setFloat(a.LayoutFloat.TOP,a.LayoutFloat.LEFT),e.addConstraint(a.LayoutConstraint.RIGHT,r.Main.canvasBounds,a.LayoutConstraint.RIGHT),e.addConstraint(a.LayoutConstraint.BOTTOM,r.Main.canvasBounds,a.LayoutConstraint.BOTTOM),e.setJustifyContent(a.LayoutAlignment.CENTER),e.setAlignItems(a.LayoutAlignment.CENTER),e.drawBackground=!0,e.setPrimaryColor("#3E4B5B"),this.addUiElement(e);var i=new s.RasterPanel;i.setImageAsync(_root+"/assets/strum-2d/logo-white.png"),i.setWidth(400),i.setHeight(400),i.getKeyHandler().keyPressed=function(e){" "==e.key&&t.dispose()},e.addComponent(i);var n=new a.Layout;n.setLayoutDirection(a.LayoutDirection.HORIZONTAL),n.setMarginBottom(10),e.addComponent(n);var u=new o.Label("made with");u.setFont("Roboto Thin",40),n.addComponent(u);var h=new o.Label(" Strum 2D");h.setFont("Roboto Bold",40),n.addComponent(h);var c=new o.Label("Copyright © 2018 Sindre T. Strøm");c.setFont("Roboto",14),c.setOpacity(.5),e.addComponent(c)},Splash.prototype.tick=function(){performance.now()-this.start>=this.duration&&this.dispose()},Splash}(u.Scene)},"./out/engine/Camera.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Camera",function(){return r});var n=i("./out/engine/Main.js"),o=i("./out/util/Utils.js"),s=i("./out/maths/Vector2.js"),r=function(){function Camera(){this.x=0,this.y=0,this.hScale=1,this.vScale=1,this.zoom=1,this.sinRot=0,this.cosRot=1,this.rotRad=0,this.rotation=0,this.zoomStep=0,this.graphicsFilter="",this.moveTarget=void 0,this.followTarget=!1,this.smoothMove=!0,this.smoothRotation=!0,this.smoothZoom=!0,this.smoothMoveSpeed=.12,this.smoothRotationSpeed=.12,this.smoothZoomSpeed=.12,this.dof=!1,this.dofAmount=6,this.dofFocus=2.5,this.lastPos=new s.Vector2(this.x,this.y),this.targetRot=0,this.lastRot=0,this.targetZoom=1,this.lastZoom=1,this.debugMode=!1,this.freeCam=!1,this.freeCamSpeed=10}return Camera.prototype.move=function(t){this.moveTarget=t},Camera.prototype.follow=function(t){this.target=t,this.followTarget=!0},Camera.prototype.setFollowTarget=function(t){!t||this.target?this.followTarget=t:console.error("The camera has no set target!")},Camera.prototype.setSmoothMove=function(t){this.smoothMove=t},Camera.prototype.setSmoothRotation=function(t){this.smoothRotation=t},Camera.prototype.setSmoothZoom=function(t){this.smoothZoom=t},Camera.prototype.setZoom=function(t,e){this.targetZoom=t;var i=6*Math.log(this.targetZoom)/Math.log(2);this.zoomStep=i},Camera.prototype.modZoom=function(t){this.setZoom(this.hScale+t),this.zoomStep=Math.round(6*Math.log(this.targetZoom)/Math.log(2))},Camera.prototype.setZoomStep=function(t,e){void 0===e&&(e=!1),this.zoomStep=e?t:Math.round(t),this.setZoom(Math.pow(2,this.zoomStep/6))},Camera.prototype.modZoomStep=function(t){this.setZoomStep(this.zoomStep+t)},Camera.prototype.modZoomStepFloat=function(t){this.setZoomStep(this.zoomStep+t,!0)},Camera.prototype.zoomToFocus=function(t){void 0===t&&(t=this.target),t?this.modZoom(-1*(t.z+n.Main.camera.zoom-n.Main.camera.dofFocus)):console.error("Camera has no target and no target was given!")},Camera.prototype.setDebug=function(t){this.debugMode=t},Camera.prototype.setRotation=function(t){this.targetRot=t%360},Camera.prototype.modRotation=function(t){this.setRotation(this.rotation+t)},Camera.prototype.setPos=function(t){this.x=t.x,this.y=t.y},Camera.prototype.getPos=function(){return new s.Vector2(this.x,this.y)},Camera.prototype.getZoomStepFloat=function(){return 6*Math.log(this.zoom)/Math.log(2)},Camera.prototype.getZoomStep=function(){return Math.round(6*Math.log(this.targetZoom)/Math.log(2))},Camera.prototype.setFreeCamMode=function(t){this.freeCam=t,n.Main.player&&n.Main.player.getKeyHandler().setEnabled(!t)},Camera.prototype.updatePos=function(){if(this.freeCam){if(this.x*=this.zoom/this.lastZoom,this.y*=this.zoom/this.lastZoom,this.lastRot!=this.rotation){var t=o.Utils.rotatePos(this.getPos(),this.rotation-this.lastRot);this.x=t.x,this.y=t.y}this.lastZoom=this.zoom,this.lastRot=this.rotation}else if(this.moveTarget||this.followTarget&&this.target){this.lastPos=this.getPos();var e=this.moveTarget.clone()||this.target.getCenter();e.x*=this.hScale,e.y*=this.vScale;var i=(e=o.Utils.getRotatedPos(e)).x-this.x,n=e.y-this.y;this.x+=i,this.y+=n}},Camera.prototype.tick=function(){if(this.freeCam){var t=Math.pow(2,-this.zoomStep/120)*this.freeCamSpeed;n.Main.input.isDown("a")&&(this.x-=t),n.Main.input.isDown("w")&&(this.y+=t),n.Main.input.isDown("d")&&(this.x+=t),n.Main.input.isDown("s")&&(this.y-=t)}if(this.moveTarget||!this.freeCam&&this.followTarget&&this.target){var e=this.moveTarget.clone()||this.target.getCenter();e.x=e.x*this.hScale,e.y=e.y*this.vScale;var i=(e=o.Utils.getRotatedPos(e)).x-this.x,s=e.y-this.y;this.smoothMove&&(i*=this.smoothMoveSpeed,s*=this.smoothMoveSpeed),this.x+=i,this.y+=s,this.moveTarget&&e.distance(this.getPos())<=1&&(this.setPos(e),this.moveTarget=void 0)}if(this.targetRot!=this.rotation){o.Utils.dif(this.targetRot,this.rotation)<.005&&(this.rotation=this.targetRot);var r=this.targetRot-this.rotation;Math.abs(r)>180&&(r+=360*-Math.sign(r)),this.smoothRotation&&(r*=this.smoothRotationSpeed),this.rotation=(this.rotation+r)%360,this.rotRad=o.Utils.toRadians(this.rotation),this.sinRot=Math.sin(this.rotRad),this.cosRot=Math.cos(this.rotRad),this.updatePos()}if(this.targetZoom!=this.zoom){o.Utils.dif(this.targetZoom,this.zoom)<.005&&(this.zoom=this.targetZoom);r=this.targetZoom-this.zoom;this.smoothZoom&&(r*=this.smoothZoomSpeed),this.zoom+=r,this.hScale=this.vScale=this.zoom,this.updatePos()}},Camera.prototype.draw=function(t){if(this.debugMode){t.setTransform(1,0,0,-1,n.Main.CANVAS_WIDTH/2,n.Main.CANVAS_HEIGHT/2),t.lineWidth=2;var e=new s.Vector2(0,60),i=o.Utils.getRotatedPos(e);t.fillStyle="#333333",t.strokeStyle="#0de075",t.beginPath(),t.moveTo(0,0),t.lineTo(e.x,e.y),t.moveTo(0,0),t.lineTo(i.x,i.y),t.moveTo(0,0),t.arc(0,0,40,o.Utils.toRadians(90),o.Utils.toRadians(90-this.rotation),!0),t.stroke(),t.strokeStyle="#d94343",t.beginPath(),t.arc(0,0,5,0,2*Math.PI),t.stroke()}},Camera}()},"./out/engine/Graphics2D.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Graphics2D",function(){return s});var n,o=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),s=function(t){function Graphics2D(){return null!==t&&t.apply(this,arguments)||this}return o(Graphics2D,t),Graphics2D.attach=function(){CanvasRenderingContext2D.prototype.roundedRect=function(t,e,i,n,o){if(0==o)this.rect(t,e,i,n);else{var s=.03*(o=Math.min(o,Math.min(i,n)/2));this.beginPath(),this.moveTo(t+o,e),this.lineTo(t+i-o,e),this.quadraticCurveTo(t+i-s,e+s,t+i,e+o),this.lineTo(t+i,e+n-o),this.quadraticCurveTo(t+i-s,e+n-s,t+i-o,e+n),this.lineTo(t+o,e+n),this.quadraticCurveTo(t+s,e+n-s,t,e+n-o),this.lineTo(t,e+o),this.quadraticCurveTo(t+s,e+s,t+o,e)}},CanvasRenderingContext2D.prototype.fillRoundedRect=function(t,e,i,n,o){this.roundedRect(t,e,i,n,o),this.fill()},CanvasRenderingContext2D.prototype.strokeRoundedRect=function(t,e,i,n,o){this.roundedRect(t,e,i,n,o),this.stroke()},CanvasRenderingContext2D.prototype.setPixel=function(t,e){this.moveTo(t,e),this.lineTo(t,e+1),this.stroke()}},Graphics2D}(CanvasRenderingContext2D)},"./out/engine/Main.js":function(t,e,i){"use strict";i.r(e),i.d(e,"UserAgent",function(){return n}),i.d(e,"Main",function(){return v});var n,o=i("./out/engine/Camera.js"),s=i("./out/util/Input.js"),r=i("./out/game/Entity.js"),a=i("./out/util/Utils.js"),u=i("./out/util/MultiMouseEvent.js"),h=i("./out/util/MultiKeyEvent.js"),c=i("./out/maths/Point.js"),l=i("./out/maths/Matrix3.js"),p=i("./out/game/ui/Panel.js"),d=i("./out/game/ui/Composite.js"),f=i("./out/DebugUi.js"),y=i("./out/util/Clipboard.js"),m=i("./out/engine/Graphics2D.js"),g=i("./out/Splash.js"),M=i("./out/util/InitResources.js"),x=i("./out/BrowserWarning.js");!function(t){t.UNKNOWN="Unknown",t.CHROME="Chromium",t.FIREFOX="Firefox"}(n||(n={}));var v=function(){function Main(){this.FRAME_RATE=60,this.TICK_RATE=60,this.drawBounds=!1,this.drawUiBounds=!1,this.drawCollisionBounds=!1,this.keyPressedEvents=[],this.keyDownEvents=[],this.keyUpEvents=[];var t=this;window.addEventListener("resize",function(){Main.resize()}),window.addEventListener("wheel",function(e){t.mouseWheelListener(e)}),document.addEventListener("DOMContentLoaded",function(){t.init()}),document.addEventListener("mousemove",function(e){t.mouseMoveListener(e)}),document.addEventListener("mousedown",function(e){t.mouseDownListener(e)}),document.addEventListener("mouseup",function(e){t.mouseUpListener(e)}),document.addEventListener("keypress",function(e){t.keyPressedListener(e)}),document.addEventListener("keydown",function(e){t.keyDownListener(e)}),document.addEventListener("keyup",function(e){t.keyUpListener(e)}),document.addEventListener("copy",function(t){t.clipboardData.setData("text/plain",y.Clipboard.getCopyData()),console.info("Copied data to clipboard!"),t.preventDefault()}),document.addEventListener("cut",function(t){t.clipboardData.setData("text/plain",y.Clipboard.getCopyData()),console.info("Copied data to clipboard!"),t.preventDefault()}),document.addEventListener("paste",function(t){y.Clipboard.setPasteData(t.clipboardData.getData("text/plain")),console.info("Wrote pasted data to memory!"),t.preventDefault()}),document.addEventListener("visibilitychange",function(t){Main.focused="hidden"!=document.visibilityState,Main.focused||(Main.wasUnfocused=!0)}),navigator.userAgent.match(/(Chrome)/)&&(Main.userAgent=n.CHROME),navigator.userAgent.match(/(Firefox)/)&&(Main.userAgent=n.FIREFOX),console.info("Detected user agent: "+Main.userAgent)}return Main.prototype.init=function(){var t,e,i,r,a=this;Main.canvas=document.querySelector("#main-canvas"),Main.canvas.style.backgroundColor="#f0f0f0",Main.buffer=document.createElement("canvas"),Main.canvasBounds=new p.Panel(Main.CANVAS_WIDTH,Main.CANVAS_HEIGHT,0,0),Main.canvasBounds.setOpacity(0),Main.addUiElement(Main.canvasBounds),Main.g2=Main.canvas.getContext("2d"),m.Graphics2D.attach(),Main.transform=new l.Matrix3,Main.resize(),Main.input=new s.Input,Main.camera=new o.Camera,Main.camera.setSmoothZoom(!0),Main.camera.setSmoothRotation(!0),Main.camera.setSmoothZoom(!0),Main.camera.setRotation(0),window.camera=Main.camera,t=e=performance.now();var u,h,c=1e3/this.FRAME_RATE,d=1e3/this.TICK_RATE;u=h=0,i=r=0,requestAnimationFrame(function mainLoop(n){if(Main.focused){for(Main.wasUnfocused&&(t=e=n,i=r=0,Main.wasUnfocused=!1,console.log("Info: Main loop was halted while the tab was out of focus.")),Main.limitFps&&(u+=(n-t)/c),h+=(n-t)/d,t=n;h>=1;)a.tick(),r++,h-=1;if(Main.limitFps)for(;u>=1;)a.draw(),i++,u%=1;else a.draw(),i++;n-e>=1e3&&(Main.fps=i,Main.tps=r,i=r=0,e+=1e3),requestAnimationFrame(mainLoop)}else requestAnimationFrame(mainLoop)}),document.addEventListener("keydown",function(t){Main.debugMode&&("r"==t.key&&t.ctrlKey&&location.reload(),"b"==t.key&&(t.ctrlKey?a.drawUiBounds=!a.drawUiBounds:a.drawBounds=!a.drawBounds),"c"==t.key&&(a.drawCollisionBounds=!a.drawCollisionBounds),"p"==t.key&&(Main.paused=!Main.paused),"+"==t.key&&Main.camera.modZoomStep(1),"-"==t.key&&Main.camera.modZoomStep(-1))}),Object(M.initResources)(),Main.debugUi=new f.DebugUi,Main.addUiElement(Main.debugUi),Main.splash=new g.Splash,Main.skipSplash||Main.sceneQueue.push(Main.splash),Main.browserWarning=new x.BrowserWarning,Main.userAgent!=n.CHROME&&Main.sceneQueue.push(Main.browserWarning),Main.setDebugMode(!0),Main.initialized=!0,Main.tempQueue.forEach(function(t){Main.sceneQueue.push(t)}),Main.tempQueue=[]},Main.resize=function(){if(Main.canvas&&!Main.lockCanvasSize){console.log("resizing canvas..."),Main.buffer.width=window.innerWidth,Main.buffer.height=window.innerHeight;var t=Main.buffer.getContext("2d");t.drawImage(Main.g2.canvas,0,0),Main.canvas.width=Main.CANVAS_WIDTH=window.innerWidth,Main.canvas.height=Main.CANVAS_HEIGHT=window.innerHeight,Main.canvasBounds.setWidth(window.innerWidth),Main.canvasBounds.setHeight(window.innerHeight),Main.g2.drawImage(t.canvas,0,0)}},Main.prototype.mouseWheelListener=function(t){t.deltaX;var e=t.deltaY;Main.userAgent==n.FIREFOX&&(100/3,e*=100/3),t.ctrlKey&&Main.camera.modZoomStepFloat(-e/100),t.preventDefault()},Main.prototype.mouseMoveListener=function(t){a.Utils.mouseX=t.x-Main.canvas.offsetLeft+Main.canvas.width/2,a.Utils.mouseY=t.y-Main.canvas.offsetTop+Main.canvas.height/2,this.mouseMoveEvent=t},Main.prototype.mouseDownListener=function(t){this.mouseDownEvent=t,Main.input.tick(t)},Main.prototype.mouseUpListener=function(t){this.mouseUpEvent=t,Main.input.tick(t)},Main.prototype.keyPressedListener=function(t){this.keyPressedEvents.push(t)},Main.prototype.keyDownListener=function(t){this.keyDownEvents.push(t),"Tab"==t.key&&t.preventDefault()},Main.prototype.keyUpListener=function(t){this.keyUpEvents.push(t)},Main.addEntity=function(t){t.setPrefferedCoordSpace(r.CoordSpace.WORLD_SPACE),t instanceof d.Composite&&Main.stackMap(function(e){e.setPrefferedCoordSpace(t.preferredCoordSpace)},!0,t.stack),Main.worldStack.push(t)},Main.addUiElement=function(t){t.setPrefferedCoordSpace(r.CoordSpace.CAMERA_SPACE),t instanceof d.Composite&&Main.stackMap(function(e){e.setPrefferedCoordSpace(t.preferredCoordSpace)},!0,t.stack),Main.uiStack.push(t)},Main.addHandler=function(t){Main.handlerStack.push(t)},Main.removeEntity=function(t){var e=Main.worldStack.indexOf(t);return-1==e?(console.error(new Error("Entity does not exist on world stack!").stack),!1):(Main.worldStack.splice(e,1),!0)},Main.removeUiElement=function(t){var e=Main.uiStack.indexOf(t);return-1==e?(console.error(new Error("Entity does not exist on UI stack!").stack),!1):(Main.uiStack.splice(e,1),!0)},Main.removeHandler=function(t){var e=Main.handlerStack.indexOf(t);return-1==e?(console.error(new Error("Entity does not exist on handler stack!").stack),!1):(Main.handlerStack.splice(e,1),!0)},Main.requestScene=function(t){Main.initialized?Main.sceneQueue.push(t):Main.tempQueue.push(t)},Main.loadScene=function(t){console.log("Loading scene: "+t.id);var e=Main.sceneQueue.indexOf(t);-1!=e&&Main.sceneQueue.splice(e,1),Main.currentScene&&!t.isOverlay()&&Main.currentScene.dispose(),t.initialized||(t.initScene(),t.initialized=!0),t.load(),t.stack.forEach(function(t){switch(t.preferredCoordSpace){case r.CoordSpace.WORLD_SPACE:Main.addEntity(t);break;case r.CoordSpace.CAMERA_SPACE:Main.addUiElement(t)}}),t.overlay||(Main.currentScene=t)},Main.prototype.validateScenes=function(){if(Main.initialized)for(var t=Main.sceneQueue.slice(0),e=0;e<t.length;e++){var i=t[e];if(i.visible){if(!i.mutable){if(i===Main.currentScene)break;Main.loadScene(i);break}if(!Main.currentScene||Main.currentScene.mutable){Main.loadScene(i);break}}}},Main.getEntityById=function(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1);var n=null,o={},s=function(r,a,u){if(r.id==t)throw n=i?[r,a,u]:r,o;if(e&&r instanceof d.Composite)try{r.stack.forEach(s)}catch(t){throw t}};try{Main.worldStack.forEach(s),Main.uiStack.forEach(s)}catch(t){return n}return console.info("Entity with id "+t+" does not exist in neither the world stack nor the UI stack."),console.trace(),null},Main.stackMap=function(t,e,i){var n=function(i,o,s){t(i,o,s),e&&i instanceof d.Composite&&i.stack.forEach(n)};i?i.forEach(n):(Main.worldStack.forEach(n),Main.uiStack.forEach(n))},Main.setCanvasSizeLock=function(t){this.lockCanvasSize=t,t?(Main.canvas.width=Main.CANVAS_WIDTH,Main.canvas.height=Main.CANVAS_HEIGHT):this.resize()},Main.setTransform=function(t){Main.g2.setTransform(t.m11,t.m12,t.m21,t.m22,t.m31,t.m32)},Main.applyTransform=function(){Main.setTransform(Main.transform)},Main.setDebugMode=function(t){this.debugMode=t,this.debugUi.setVisible(t)},Main.toggleDevMode=function(){Main.debugMode&&this.debugUi.setVisible(!this.debugUi.visible)},Main.isEntity=function(t){for(;null!==t.__proto__.__proto__;)t=t.__proto__;return"Entity"===t.constructor.name},Main.prototype.zSort=function(){var t=function(t,e){return t.z>e.z?1:t.z<e.z?-1:0},e=function(i){i.sort(t),i.forEach(function(t){t instanceof d.Composite&&e(t.stack)})};e(Main.worldStack),e(Main.uiStack)},Main.prototype.handleEntityRotation=function(t){var e=t.getPos(),i=a.Utils.toRadians(t.rotation),n=t.getBounds().width,o=t.getBounds().height,s=Math.sin(Main.camera.rotRad+i),r=Math.cos(Main.camera.rotRad+i),u=(-e.y*-s+e.x*r)*Main.camera.hScale,h=(e.y*r+e.x*-s)*Main.camera.vScale,l=new c.Point(-n/2,-o/2),p=(-l.y*-Math.sin(i)+l.x*Math.cos(i))*Main.camera.hScale,d=(l.y*Math.cos(i)+l.x*-Math.sin(i))*Main.camera.vScale,f=a.Utils.getRotatedPos(new c.Point(p,d));p=f.x,d=f.y;var y=(f=a.Utils.getRotatedPos(e)).x*Main.camera.hScale-u,m=f.y*Main.camera.vScale-h,g=a.Utils.getRotatedPos(new c.Point(n/2,o/2));Main.transform.update(Main.camera.hScale*r,Main.camera.hScale*s,void 0,Main.camera.vScale*s,-Main.camera.vScale*r,void 0,-(Main.camera.x-Main.CANVAS_WIDTH/2-(y+p+g.x*Main.camera.hScale)),-(-Main.camera.y-Main.CANVAS_HEIGHT/2+(m+d+g.y*Main.camera.vScale)))},Main.prototype.cullTest=function(t){switch(t.preferredCoordSpace){case r.CoordSpace.WORLD_SPACE:var e=a.Utils.toCameraPos(t.getPos());if(e.x+t.getBounds().width*Main.camera.hScale<0)return!0;if(e.x>Main.CANVAS_WIDTH)return!0;if(e.y<0)return!0;if(e.y-t.getBounds().height*Main.camera.vScale>Main.CANVAS_HEIGHT)return!0}return!1},Main.prototype.draw=function(){var t=this;Main.draws=0,Main.g2.setTransform(1,0,0,1,0,0),Main.g2.fillStyle=Main.g2.strokeStyle="#333",Main.g2.lineWidth=1,Main.g2.clearRect(0,0,Main.canvas.width,Main.canvas.height),Main.lockCanvasSize&&Main.g2.strokeRect(0,0,Main.canvas.width,Main.canvas.height),Main.transform.update(Main.camera.hScale*Main.camera.cosRot,Main.camera.hScale*Main.camera.sinRot,void 0,Main.camera.vScale*Main.camera.sinRot,-Main.camera.vScale*Main.camera.cosRot,void 0,-(Main.camera.x-Main.CANVAS_WIDTH/2),-(-Main.camera.y-Main.CANVAS_HEIGHT/2)),this.zSort();var e=function(i){if(i.visible&&i.opacity>0){if(!(i instanceof d.Composite)&&t.cullTest(i))return;var n=i.preferredCoordSpace==r.CoordSpace.WORLD_SPACE;Main.draws++,Main.g2.globalAlpha=i.opacity;var o=a.Utils.getInverseRotatedPos(new c.Point(i.shadowOffset.x,i.shadowOffset.y));if(Main.g2.shadowOffsetX=o.x,Main.g2.shadowOffsetY=o.y,Main.g2.shadowBlur=i.shadowBlur,Main.g2.shadowColor=i.shadowColor,n){Main.g2.shadowOffsetX*=Main.camera.hScale,Main.g2.shadowOffsetY*=Main.camera.vScale,Main.g2.shadowBlur*=Main.camera.hScale;var s=" ";if(Main.camera.dof){var u=Math.abs(i.z/10+Main.camera.zoom-Main.camera.dofFocus)*Main.camera.dofAmount;u>.3&&(s+="blur("+u+"px)")}Main.g2.filter="none"==Main.graphicsFilter&&" "!=s?s:Main.graphicsFilter+s}else Main.transform=l.Matrix3.getUniform(),Main.g2.filter="none";var h=Main.transform.clone();0!=i.rotation&&t.handleEntityRotation(i),Main.applyTransform(),i.draw(Main.g2),Main.transform=h,i instanceof d.Composite&&i.stack.forEach(e),Main.g2.shadowColor="rgba(0, 0, 0, 0)",Main.g2.filter="none",(t.drawBounds&&n||t.drawUiBounds&&!n)&&(Main.g2.strokeStyle="#2881c9",Main.g2.lineWidth=1,Main.g2.globalAlpha=1,i.getBounds().draw(Main.g2)),t.drawCollisionBounds&&i.collisionHandler&&n&&i.getCollisionHandler().draw(Main.g2)}};Main.worldStack.forEach(e),Main.uiStack.forEach(e),Main.camera.draw(Main.g2),Main.dpf=Main.draws},Main.prototype.tick=function(){this.validateScenes(),(this.mouseMoveEvent||this.mouseDownEvent||this.mouseUpEvent)&&(Main.mouseEvent=new u.MultiMouseEvent(this.mouseMoveEvent,this.mouseDownEvent,this.mouseUpEvent)),(this.keyPressedEvents.length||this.keyDownEvents.length||this.keyUpEvents.length)&&(Main.keyEvent=new h.MultiKeyEvent(a.Utils.spliceFirst(this.keyPressedEvents),a.Utils.spliceFirst(this.keyDownEvents),a.Utils.spliceFirst(this.keyUpEvents))),Main.input.setLock(!1);var t=function(e,i){e.mouseHandler&&Main.mouseEvent&&e.mouseHandler.tick(Main.mouseEvent),e.keyHandler&&Main.keyEvent&&e.keyHandler.tick(Main.keyEvent),e.collisionHandler&&e.collisionHandler.tick(),e.update&&e.update(),Main.isEntity(e)&&(e.tick(),e.handlers.forEach(function(e){t(e,i)})),e instanceof d.Composite&&e.stack.slice(0).reverse().forEach(t)};Main.currentScene&&Main.currentScene.tick(),Main.uiStack.slice(0).reverse().forEach(t),Main.paused||Main.worldStack.slice(0).reverse().forEach(t),Main.handlerStack.slice(0).reverse().forEach(t),Main.keyEvent&&(Main.keyEvent.keyDown&&Main.input.tick(Main.keyEvent.keyDown),Main.keyEvent.keyUp&&Main.input.tick(Main.keyEvent.keyUp)),Main.mouseEvent=Main.keyEvent=this.mouseMoveEvent=this.mouseDownEvent=this.mouseUpEvent=void 0,Main.camera.tick()},Main.CANVAS_WIDTH=800,Main.CANVAS_HEIGHT=600,Main.initialized=!1,Main.running=!1,Main.paused=!1,Main.focused=!0,Main.userAgent=n.UNKNOWN,Main.debugMode=!1,Main.wasUnfocused=!1,Main.limitFps=!0,Main.lockCanvasSize=!1,Main.graphicsFilter="none",Main.tps=0,Main.fps=0,Main.draws=0,Main.dpf=0,Main.worldStack=[],Main.uiStack=[],Main.handlerStack=[],Main.tempQueue=[],Main.sceneQueue=[],Main.gravity=-1.2,Main.entityIdCounter=0,Main.sceneIdCounter=0,Main.skipSplash=!1,Main}()},"./out/game/Character.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Character",function(){return r});var n,o=i("./out/game/Component.js"),s=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),r=function(t){function Character(){var e=null!==t&&t.apply(this,arguments)||this;return e.onGround=!1,e}return s(Character,t),Character.prototype.move=function(){},Character}(o.Component)},"./out/game/Component.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Component",function(){return r});var n,o=i("./out/game/Entity.js"),s=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)});Object(o.initEntity)();var r=function(t){function Component(){var e=null!==t&&t.apply(this,arguments)||this;return e.primaryColor="#2196f3",e.secondaryColor="#ffc107",e}return s(Component,t),Component.prototype.setPrimaryColor=function(t){this.primaryColor=t},Component.prototype.setSecondaryColor=function(t){this.secondaryColor=t},Component}(o.Entity)},"./out/game/Entity.js":function(t,e,i){"use strict";i.r(e),i.d(e,"initEntity",function(){return initEntity}),i.d(e,"Entity",function(){return n}),i.d(e,"IEntity",function(){return l}),i.d(e,"CoordSpace",function(){return c});var n,o=i("./out/maths/Rectangle.js"),s=i("./out/util/MouseHandler.js"),r=i("./out/util/KeyHandler.js"),a=i("./out/physics/CollisionHandler.js"),u=i("./out/maths/Vector2.js"),h=i("./out/engine/Main.js");function initEntity(){n||(n=function(){function Entity(){this.id=h.Main.entityIdCounter++,this.x=0,this.y=0,this.z=0,this.vx=0,this.vy=0,this.width=0,this.height=0,this.rotation=0,this.timeMultiplier=1,this.friction=.1,this.restitution=0,this.mass=1,this.solid=!1,this.physicsObject=!1,this.visible=!0,this.opacity=1,this.shadowBlur=0,this.shadowColor="#222222",this.shadowOffset=new u.Vector2(0,0),this.preferredCoordSpace=c.WORLD_SPACE,this.handlers=[],this.transformListeners=[]}return Entity.prototype.draw=function(t){},Entity.prototype.tick=function(){},Entity.prototype.updateBounds=function(){this.bounds&&(this.bounds.x=this.x,this.bounds.y=this.y)},Entity.prototype.triggerTransformListeners=function(){0!=this.transformListeners.length&&this.transformListeners.forEach(function(t){t()})},Entity.prototype.addTransformListener=function(t){this.transformListeners.push(t)},Entity.prototype.removeTransformListener=function(t){var e=this.transformListeners.indexOf(t),i=-1!=e;return i&&this.transformListeners.splice(e,1),i},Entity.prototype.dispose=function(t){void 0===t&&(t=!0);var e=h.Main.getEntityById(this.id,t,!0);return!!e&&(e[2].splice(e[1],1),!0)},Entity.prototype.setX=function(t){this.x=t,this.updateBounds(),this.triggerTransformListeners()},Entity.prototype.setY=function(t){this.y=t,this.updateBounds(),this.triggerTransformListeners()},Entity.prototype.modX=function(t){this.x+=t,this.updateBounds(),this.triggerTransformListeners()},Entity.prototype.modY=function(t){this.y+=t,this.updateBounds(),this.triggerTransformListeners()},Entity.prototype.setPos=function(t){this.x=t.x,this.y=t.y,this.updateBounds(),this.triggerTransformListeners()},Entity.prototype.modPos=function(t){this.x+=t.x,this.y+=t.y,this.updateBounds(),this.triggerTransformListeners()},Entity.prototype.setVx=function(t){this.vx=t},Entity.prototype.setVy=function(t){this.vy=t},Entity.prototype.modVx=function(t){this.vx+=t},Entity.prototype.modVy=function(t){this.vy+=t},Entity.prototype.getBounds=function(){if(!this.bounds){var t=this.width?this.width:0,e=this.height?this.height:0;this.bounds=new o.Rectangle(t,e,this.x,this.y)}return this.bounds},Entity.prototype.setWidth=function(t){this.width=t,this.getBounds().width=this.width,this.triggerTransformListeners()},Entity.prototype.setHeight=function(t){this.height=t,this.getBounds().height=this.height,this.triggerTransformListeners()},Entity.prototype.setSize=function(t,e){this.width=this.getBounds().width=t,this.height=this.getBounds().height=e,this.triggerTransformListeners()},Entity.prototype.setVisible=function(t){this.visible=t},Entity.prototype.setOpacity=function(t){this.opacity=t},Entity.prototype.setShadowBlur=function(t,e,i){this.shadowBlur=t,void 0!=e&&(this.shadowOffset.x=e),void 0!=i&&(this.shadowOffset.y=i)},Entity.prototype.setShadowColor=function(t){this.shadowColor=t},Entity.prototype.setPrefferedCoordSpace=function(t){this.preferredCoordSpace=t},Entity.prototype.addHandler=function(t){return this.handlers.push(t),t},Entity.prototype.getHandlers=function(){return this.handlers},Entity.prototype.getMouseHandler=function(){return this.mouseHandler||(this.mouseHandler=new s.MouseHandler(this)),this.mouseHandler},Entity.prototype.getKeyHandler=function(){return this.keyHandler||(this.keyHandler=new r.KeyHandler),this.keyHandler},Entity.prototype.getCollisionHandler=function(){return this.collisionHandler||(this.collisionHandler=new a.CollisionHandler(this)),this.collisionHandler},Entity.prototype.getPos=function(){return new u.Vector2(this.x,this.y)},Entity.prototype.getCenter=function(){return new u.Vector2(this.x+this.width/2,this.y+this.height/2)},Entity}())}initEntity();var c,l=function(){function IEntity(){}return IEntity.prototype.updateBounds=function(){},IEntity.prototype.triggerTransformListeners=function(){},IEntity.prototype.addTransformListener=function(t){},IEntity.prototype.removeTransformListener=function(t){return!0},IEntity.prototype.dispose=function(t){return void 0===t&&(t=!0),!0},IEntity.prototype.setX=function(t){},IEntity.prototype.setY=function(t){},IEntity.prototype.modX=function(t){},IEntity.prototype.modY=function(t){},IEntity.prototype.setPos=function(t){},IEntity.prototype.modPos=function(t){},IEntity.prototype.setVx=function(t){},IEntity.prototype.setVy=function(t){},IEntity.prototype.modVx=function(t){},IEntity.prototype.modVy=function(t){},IEntity.prototype.getBounds=function(){return new o.Rectangle(1,1)},IEntity.prototype.setWidth=function(t){},IEntity.prototype.setHeight=function(t){},IEntity.prototype.setSize=function(t,e){},IEntity.prototype.setVisible=function(t){},IEntity.prototype.setOpacity=function(t){},IEntity.prototype.setShadowBlur=function(t,e,i){},IEntity.prototype.setShadowColor=function(t){},IEntity.prototype.setPrefferedCoordSpace=function(t){},IEntity.prototype.addHandler=function(t){return t},IEntity.prototype.getHandlers=function(){},IEntity.prototype.getMouseHandler=function(){return new s.MouseHandler(this)},IEntity.prototype.getKeyHandler=function(){return new r.KeyHandler},IEntity.prototype.getCollisionHandler=function(){return new a.CollisionHandler(this)},IEntity.prototype.getPos=function(){return new u.Vector2(0,0)},IEntity.prototype.getCenter=function(){return new u.Vector2(0,0)},IEntity}();!function(t){t[t.WORLD_SPACE=0]="WORLD_SPACE",t[t.CAMERA_SPACE=1]="CAMERA_SPACE"}(c||(c={}))},"./out/game/Particle.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Particle",function(){return r});var n,o=i("./out/game/Component.js"),s=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),r=function(t){function Particle(e,i){void 0===e&&(e=0),void 0===i&&(i=0);var n=t.call(this)||this;return n.radius=1,n.x=e,n.y=i,n}return s(Particle,t),Particle.prototype.draw=function(t){t.fillStyle=this.primaryColor,t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),t.fill()},Particle.prototype.tick=function(){},Particle}(o.Component)},"./out/game/ParticleCluster.js":function(t,e,i){"use strict";i.r(e),i.d(e,"ParticleCluster",function(){return c}),i.d(e,"ClusterConnectionStyle",function(){return o});var n,o,s=i("./out/maths/Point.js"),r=i("./out/game/Component.js"),a=i("./out/game/Particle.js"),u=i("./out/util/Utils.js"),h=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),c=function(t){function ParticleCluster(){var e=null!==t&&t.apply(this,arguments)||this;return e.stack=[],e.drawParticles=!0,e.drawConnections=!0,e.splineTension=.5,e.connectionDrawStyle=o.LINES,e.splinePoints=[],e}return h(ParticleCluster,t),ParticleCluster.prototype.addParticle=function(t,e){t instanceof a.Particle?this.stack.push(t):this.stack.push(new a.Particle(t,e))},ParticleCluster.prototype.disposeStack=function(){this.stack=[]},ParticleCluster.prototype.calcSplinePoints=function(t,e,i){void 0===t&&(t=this.splineTension),void 0===e&&(e=!1),void 0===i&&(i=16);var n,o,r,a,u,h,c,l,p,d,f,y,m=[],g=[];m=this.stack.slice(0),e?(m.unshift(this.stack[this.stack.length-1]),m.unshift(this.stack[this.stack.length-1]),m.push(this.stack[0])):(m.unshift(this.stack[0]),m.push(this.stack[this.stack.length-1]));for(var M=1;M<m.length-2;M++)for(y=0;y<=i;y++)r=(m[M+1].x-m[M-1].x)*t,a=(m[M+2].x-m[M].x)*t,u=(m[M+1].y-m[M-1].y)*t,h=(m[M+2].y-m[M].y)*t,f=y/i,c=2*Math.pow(f,3)-3*Math.pow(f,2)+1,l=-2*Math.pow(f,3)+3*Math.pow(f,2),p=Math.pow(f,3)-2*Math.pow(f,2)+f,d=Math.pow(f,3)-Math.pow(f,2),n=c*m[M].x+l*m[M+1].x+p*r+d*a,o=c*m[M].y+l*m[M+1].y+p*u+d*h,g.push(new s.Point(n,o));return g},ParticleCluster.prototype.updateDimensions=function(){var t=Number.MAX_SAFE_INTEGER,e=-Number.MAX_SAFE_INTEGER,i=Number.MAX_SAFE_INTEGER,n=-Number.MAX_SAFE_INTEGER;this.stack.forEach(function(o){t=Math.min(t,o.x),e=Math.max(e,o.x),i=Math.min(i,o.y),n=Math.max(n,o.y)}),this.setX(t),this.setY(i),this.getBounds().width=u.Utils.dif(t,e),this.getBounds().height=u.Utils.dif(i,n)},ParticleCluster.prototype.draw=function(t){var e=this;if(this.drawParticles&&this.stack.forEach(function(e){e.draw(t)}),this.drawConnections&&this.stack.length>1)switch(t.strokeStyle=this.primaryColor,t.lineWidth=1,t.beginPath(),this.connectionDrawStyle){case o.LINES:t.moveTo(this.stack[0].x,this.stack[0].y),this.stack.forEach(function(i,n){n<e.stack.length-1&&t.lineTo(e.stack[n+1].x,e.stack[n+1].y)}),t.stroke();break;case o.SPLINES:if(this.splinePoints.length<2)break;t.moveTo(this.splinePoints[0].x,this.splinePoints[0].y);for(var i=1;i<this.splinePoints.length-1;i++)t.lineTo(this.splinePoints[i].x,this.splinePoints[i].y);t.stroke()}},ParticleCluster.prototype.tick=function(){switch(this.updateDimensions(),this.connectionDrawStyle){case o.SPLINES:this.splinePoints=this.calcSplinePoints()}},ParticleCluster}(r.Component);!function(t){t[t.LINES=0]="LINES",t[t.SPLINES=1]="SPLINES",t[t.CENTER_CURVES=2]="CENTER_CURVES"}(o||(o={}))},"./out/game/Player.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Player",function(){return h});var n,o=i("./out/game/Character.js"),s=i("./out/maths/Segment.js"),r=i("./out/engine/Main.js"),a=i("./out/util/MouseHandler.js"),u=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),h=function(t){function Player(){var e=t.call(this)||this;e.jumpHeight=25,e.jumpCount=0,e.maxJumps=2e8;var i=e;e.setWidth(50),e.setHeight(50),e.speed=10,e.solid=!0,e.primaryColor="#ffc805",e.timeMultiplier=1;var n=e.getCollisionHandler();e.setHeight(50),n.collision=function(t){console.log(t)},e.seg=new s.Segment(100,100,180,230),e.normal=e.seg.getNormal().getUnit();var o=e.seg.getCenter();return e.normal.x=o.x,e.normal.y=o.y,e.normal.multiply(50),e.getKeyHandler().keyDown=function(t){t.repeat||("w"!=t.key&&"W"!=t.key||i.modVy(i.speed),"s"!=t.key&&"S"!=t.key||i.modVy(-i.speed)," "==t.key&&(i.onGround&&(i.jumpCount=0),i.jumpCount<i.maxJumps&&(1==i.jumpCount?(i.setVy(15),i.vx<0?i.setVx(-25):i.vx>0&&i.setVx(25)):i.setVy(i.jumpHeight),i.jumpCount++)))},e.getMouseHandler().mouseEntered=function(t){a.MouseHandler.setCursor(a.Cursor.CROSSHAIR)},e.getMouseHandler().mouseExited=function(t){a.MouseHandler.setCursor(a.Cursor.DEFAULT)},e}return u(Player,t),Player.prototype.draw=function(t){t.fillStyle=this.primaryColor,t.fillRect(this.x,this.y,this.width,this.height),this.seg.draw(t),this.normal.draw(t)},Player.prototype.tick=function(){this.getKeyHandler().enabled&&(r.Main.input.isDown("a")&&this.setVx(-this.speed),r.Main.input.isDown("d")&&this.setVx(this.speed)),this.getCollisionHandler().resolveMovementCollision(),this.move()},Player}(o.Character)},"./out/game/Scene.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Scene",function(){return a});var n=i("./out/engine/Main.js"),o=i("./out/game/ui/Composite.js"),s=i("./out/game/Entity.js"),r=i("./out/util/MouseHandler.js"),a=function(){function Scene(){this.id=n.Main.sceneIdCounter++,this.visible=!1,this.mutable=!0,this.overlay=!1,this.initialized=!1,this.ready=!1,this.stack=[]}return Scene.prototype.dispose=function(){var t=!0;try{this.stack.forEach(function(t){t.dispose(!1)})}catch(e){t=!1,console.error("Error encountered upon scene disposal:"),console.error(e)}var e=n.Main.sceneQueue.indexOf(this);return-1!=e&&n.Main.sceneQueue.splice(e,1),n.Main.currentScene===this&&(n.Main.currentScene=void 0),r.MouseHandler.setCursor(r.Cursor.DEFAULT),t},Scene.prototype.addEntity=function(t){this.stack.push(t),t.setPrefferedCoordSpace(s.CoordSpace.WORLD_SPACE),t instanceof o.Composite&&n.Main.stackMap(function(e){e.setPrefferedCoordSpace(t.preferredCoordSpace)},!0,t.stack),n.Main.currentScene===this&&n.Main.addEntity(t)},Scene.prototype.addUiElement=function(t){this.stack.push(t),t.setPrefferedCoordSpace(s.CoordSpace.CAMERA_SPACE),t instanceof o.Composite&&n.Main.stackMap(function(e){e.setPrefferedCoordSpace(t.preferredCoordSpace)},!0,t.stack),n.Main.currentScene===this&&n.Main.addUiElement(t)},Scene.prototype.removeEntity=function(t){var e=this.stack.indexOf(t);-1!=e?(this.stack.splice(e,1),t.dispose()):console.error("Entity is not part of scene "+this.id)},Scene.prototype.setReady=function(t){this.ready=t},Scene.prototype.isReady=function(){return this.ready},Scene.prototype.isOverlay=function(){return this.overlay},Scene}()},"./out/game/ui/BarGraph.js":function(t,e,i){"use strict";i.r(e),i.d(e,"BarGraph",function(){return a});var n,o=i("./out/game/ui/Graph.js"),s=i("./out/engine/Main.js"),r=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),a=function(t){function BarGraph(e,i,n){var o=t.call(this)||this;return o.offX=0,o.offY=0,o.offWidth=0,o.offHeight=0,o.minX=0,o.minY=0,o.maxX=100,o.maxY=100,o.resolutionX=40,o.resolutionY=10,o.precisionX=1,o.precisionY=1,o.autoAdjustMinX=!0,o.autoAdjustMinY=!0,o.autoAdjustMaxX=!0,o.autoAdjustMaxY=!0,o.barColour="#00b0ff",o.setWidth(e),o.setHeight(i),void 0!=n&&(o.maxY=n),o.setPrimaryColor("#333333"),o.setSecondaryColor("#555555"),o}return r(BarGraph,t),BarGraph.prototype.analyzeData=function(){var t=this;this.autoAdjustMinX&&(this.minX=Number.MAX_SAFE_INTEGER),this.autoAdjustMinY&&(this.minY=Number.MAX_SAFE_INTEGER),this.autoAdjustMaxX&&(this.maxX=0),this.autoAdjustMaxY&&(this.maxY=0),this.data.forEach(function(e){e.id&&(t.autoAdjustMinX&&(t.minX=Math.min(parseInt(e.id),t.minX)),t.autoAdjustMinY&&(t.minY=Math.min(e.value,t.minY)),t.autoAdjustMaxX&&(t.maxX=Math.max(parseInt(e.id),t.maxX)),t.autoAdjustMaxY&&(t.maxY=Math.max(e.value,t.maxY)))}),this.updateOffsets()},BarGraph.prototype.updateOffsets=function(){this.applyFont();var t=s.Main.g2.measureText(String(this.maxX.toFixed(this.precisionX))),e=s.Main.g2.measureText(String(this.maxY.toFixed(this.precisionY)));this.offX=e.width+this.labelMargin+1,this.offY=this.fontSize,this.offWidth=-(t.width+this.offX),this.offHeight=-(this.fontSize+this.labelMargin+1+this.offY)},BarGraph.prototype.setFont=function(t){this.font=t,this.updateOffsets()},BarGraph.prototype.setFontSize=function(t){this.fontSize=t,this.updateOffsets()},BarGraph.prototype.setResolutionX=function(t){this.resolutionX=Math.round(t)},BarGraph.prototype.setResolutionY=function(t){this.resolutionY=Math.round(t)},BarGraph.prototype.setPrecisionX=function(t){this.precisionX=Math.round(t)},BarGraph.prototype.setPrecisionY=function(t){this.precisionY=Math.round(t)},BarGraph.prototype.getInnerX=function(){return this.x+this.offX},BarGraph.prototype.getInnerY=function(){return this.y+this.offY},BarGraph.prototype.getInnerWidth=function(){return this.width+this.offWidth},BarGraph.prototype.getInnerHeight=function(){return this.height+this.offHeight},BarGraph.prototype.draw=function(t){var e=this;t.fillStyle=this.primaryColor,t.strokeStyle=this.secondaryColor,t.lineWidth=1,this.applyFont(),t.beginPath(),t.moveTo(this.getInnerX(),this.getInnerY()),t.lineTo(this.getInnerX(),this.getInnerY()+this.getInnerHeight()),t.lineTo(this.getInnerX()+this.getInnerWidth(),this.getInnerY()+this.getInnerHeight()),t.stroke();for(var i=this.getInnerHeight()/this.resolutionY,n=0;n<=this.resolutionY;n++){var o=i*n,s=this.maxY*(n/this.resolutionY),r=-(t.measureText(String(s.toFixed(this.precisionY))).width+this.labelMargin);t.fillText(String(s.toFixed(this.precisionY)),this.getInnerX()+r,this.getInnerY()+this.getInnerHeight()-o)}t.fillStyle=this.barColour;var a=this.getInnerWidth()/(this.maxX-this.minX+1);this.data.forEach(function(i){if(i.id){var n=i.value/e.maxY*e.getInnerHeight(),o=parseFloat(i.id)*a-e.minX*a;t.fillRect(e.getInnerX()+o,e.getInnerY()+e.getInnerHeight()-n,a,n),0}}),t.fillStyle=this.primaryColor;var u=Math.round(Math.min(this.getInnerWidth()/a,this.resolutionX))-1;i=this.getInnerWidth()/(u+1);for(var h=0;h<=u;h++){r=i*h,s=(this.maxX-this.minX)*(h/u)+this.minX,o=this.fontSize+this.labelMargin;t.fillText(String(s.toFixed(this.precisionX)),this.getInnerX()+r,this.getInnerY()+this.getInnerHeight()+o)}},BarGraph.prototype.tick=function(){},BarGraph}(o.Graph)},"./out/game/ui/Button.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Button",function(){return c});var n,o=i("./out/util/Handler.js"),s=i("./out/game/ui/TextModule.js"),r=i("./out/util/Color.js"),a=i("./out/util/MouseHandler.js"),u=i("./out/engine/Main.js"),h=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),c=function(t){function Button(){var e=t.call(this)||this;return e.margin=12,e.cornerRadius=3,e.fillColor=e.primaryColor,e.strokeColor=e.secondaryColor,e.buttonHandler=e.addHandler(new o.Handler(e)),e.setFont("Roboto Bold",14),e.setText("Button"),e.buttonHandler.getMouseHandler().mouseEntered=function(t){e.fillColor=r.Color.modColor(e.primaryColor,15),a.MouseHandler.setCursor(a.Cursor.POINTER)},e.buttonHandler.getMouseHandler().mouseExited=function(t){e.fillColor=e.primaryColor,a.MouseHandler.setCursor(a.Cursor.DEFAULT)},e.buttonHandler.getMouseHandler().mouseLeftDown=function(t){e.fillColor=r.Color.modColor(e.primaryColor,-15)},e.buttonHandler.getMouseHandler().mouseLeftUp=function(t){e.fillColor=r.Color.modColor(e.primaryColor,15)},e}return h(Button,t),Button.prototype.setPrimaryColor=function(t){this.primaryColor=t,this.fillColor=this.primaryColor},Button.prototype.setSecondaryColor=function(t){this.secondaryColor=t,this.strokeColor=this.secondaryColor},Button.prototype.updateDimensions=function(){this.applyFont();var t=this.text.length>0?this.text:this.placeholder;this.textWidth=u.Main.g2.measureText(t).width,this.textHeight=this.fontSize,this.setWidth(this.textWidth+2*this.margin),this.setHeight(this.textHeight+2*this.margin),this.triggerTransformListeners()},Button.prototype.draw=function(t){this.applyFont(),t.fillStyle=this.fillColor,t.strokeStyle=this.strokeColor,t.fillRoundedRect(this.x,this.y,this.textWidth+2*this.margin,this.textHeight+2*this.margin,this.cornerRadius),t.strokeRoundedRect(this.x,this.y,this.textWidth+2*this.margin,this.textHeight+2*this.margin,this.cornerRadius),t.fillStyle=this.textColor,t.fillText(this.text,this.x+this.margin,this.y+this.margin+this.textHeight)},Button.prototype.tick=function(){},Button}(s.TextModule)},"./out/game/ui/Composite.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Composite",function(){return a});var n,o=i("./out/game/Component.js"),s=i("./out/engine/Main.js"),r=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),a=function(t){function Composite(){var e=null!==t&&t.apply(this,arguments)||this;return e.stack=[],e}return r(Composite,t),Composite.prototype.addComponent=function(t){this.stack.push(t)},Composite.prototype.setPrefferedCoordSpace=function(t){this.preferredCoordSpace=t,this.stack.forEach(function(e){e.setPrefferedCoordSpace(t)})},Composite.prototype.pushAsUi=function(){this.stack.forEach(function(t){s.Main.addUiElement(t)})},Composite.prototype.pushAsWorld=function(){this.stack.forEach(function(t){s.Main.addEntity(t)})},Composite.prototype.draw=function(t){},Composite.prototype.tick=function(){},Composite}(o.Component)},"./out/game/ui/Constraint.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Constraint",function(){return n});var n=function(){function Constraint(t,e,i,n){this.subject=t,this.anchor=e,this.target=i,this.transformHandler=n}return Constraint.prototype.dispose=function(){return this.target.removeTransformListener(this.transformHandler)},Constraint}()},"./out/game/ui/Graph.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Graph",function(){return u});var n,o=i("./out/game/Component.js"),s=i("./out/game/ui/TextModule.js"),r=i("./out/engine/Main.js"),a=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),u=function(t){function Graph(){var e=null!==t&&t.apply(this,arguments)||this;return e.data=[],e.font=s.Font.CONSOLAS,e.fontSize=10,e.labelMargin=3,e}return a(Graph,t),Graph.prototype.applyFont=function(){r.Main.g2.font=this.fontSize+"px "+this.font},Graph.prototype.setData=function(t){this.data=t,this.analyzeData()},Graph.prototype.getData=function(){return this.data},Graph.prototype.setFont=function(t){this.font=t},Graph.prototype.setFontSize=function(t){this.fontSize=t},Graph}(o.Component)},"./out/game/ui/InputField.js":function(t,e,i){"use strict";i.r(e),i.d(e,"InputField",function(){return c});var n,o=i("./out/game/Entity.js"),s=i("./out/util/Utils.js"),r=i("./out/maths/Point.js"),a=i("./out/engine/Main.js"),u=i("./out/game/ui/TextModule.js"),h=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),c=function(t){function InputField(){var e=t.call(this)||this;return e.label="",e.hasLabel=!1,e.borderRadius=0,e.outline=!0,e.setInputModule(!0),e.setWidth(140),e.setHeight(30),e.setMarginLeft(12),e.setMarginRight(12),e.setBorderRadius(e.height/2),e.setOutline(!1),e}return h(InputField,t),InputField.prototype.setBorderRadius=function(t){this.borderRadius=t},InputField.prototype.setOutline=function(t){this.outline=t},InputField.prototype.setLabel=function(t){this.label=t,this.marginLeft=12+this.measureString(t).width+5,this.hasLabel=t.length>0},InputField.prototype.setMarginLeft=function(t){this.hasLabel?console.info("Left margin cannot be adjusted on labeled InputFields."):this.marginLeft=t},InputField.prototype.getBorderRadius=function(){return this.borderRadius},InputField.prototype.getOutline=function(){return this.outline},InputField.prototype.draw=function(t){if(t.fillStyle=this.primaryColor,t.strokeStyle=this.selected?this.selectedColor:this.secondaryColor,t.lineWidth=1,this.applyFont(),t.fillRoundedRect(this.x,this.y,this.width,this.height,this.borderRadius),t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0,this.hasLabel&&(this.measureString(this.label).width,t.save(),t.strokeStyle=this.secondaryColor,t.clip(),t.fillStyle="#000000",t.globalAlpha=.3*t.globalAlpha,t.fillRect(this.x,this.y,this.marginLeft-5,this.height),t.restore()),(this.selected||this.outline)&&(t.strokeRoundedRect(this.x,this.y,this.width,this.height,this.borderRadius),t.beginPath()),t.save(),t.beginPath(),t.rect(this.x+this.marginLeft-5,this.y,this.getInnerWidth()+this.marginRight,this.height),t.clip(),this.hasSelection){var e=this.getSelectionRange(),i=this.xOfIndex(e[0]),n=this.widthOfTextRange(e[0],e[1]);t.fillStyle=this.highlightColor;var h=t.globalAlpha;t.globalAlpha=.25*t.globalAlpha,t.fillRect(i,this.y+this.height/2-this.textHeight/2,n,1.2*this.textHeight),t.globalAlpha=h}if(this.preferredCoordSpace==o.CoordSpace.WORLD_SPACE){var c=s.Utils.getInverseRotatedPos(new r.Point(0,2*this.y*a.Main.camera.vScale+this.height*a.Main.camera.vScale)),l=a.Main.transform.clone();l.m21*=-1,l.m22*=-1,l.m31-=c.x,l.m32-=c.y,a.Main.setTransform(l)}var p=this.text,d=t.globalAlpha;switch(0==this.text.length&&(t.globalAlpha=.5*d,p=this.placeholder),t.fillStyle=this.textColor,this.applyFont(),this.alignment){case u.TextAlignment.LEFT_TO_RIGHT:t.fillText(p,this.x+this.marginLeft+this.offsetX,this.y+this.height/2+this.textHeight/2);break;case u.TextAlignment.RIGHT_TO_LEFT:t.fillText(p,this.x+this.marginLeft+this.getInnerWidth()-this.textWidth+this.offsetX,this.y+this.height/2+this.textHeight/2)}t.restore(),t.fillStyle=this.textColor,t.globalAlpha=.6*d,this.hasLabel&&(t.font="bold "+t.font,t.fillText(this.label,this.x+6,this.y+this.height/2+this.textHeight/2)),t.globalAlpha=d,this.selected&&performance.now()%this.cursorBlink*2>=this.cursorBlink&&(t.fillStyle=this.cursorColor,t.fillRect(this.cursorX,this.y+this.height/2-this.textHeight/2,this.cursorWidth,this.fontSize))},InputField.prototype.tick=function(){},InputField}(u.TextModule)},"./out/game/ui/Label.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Label",function(){return a});var n,o=i("./out/game/ui/TextModule.js"),s=i("./out/engine/Main.js"),r=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),a=function(t){function Label(e,i,n){var o=t.call(this)||this;return e&&o.setText(e),i&&o.setX(i),n&&o.setY(n),o}return r(Label,t),Label.prototype.updateDimensions=function(){this.setHeight(this.fontSize),s.Main.g2.font=this.fontSize+"px "+this.font,this.setWidth(s.Main.g2.measureText(this.text).width),this.triggerTransformListeners()},Label.prototype.setText=function(t){this.text=t,this.updateDimensions()},Label.prototype.setFontSize=function(t){this.fontSize=t,this.updateDimensions()},Label.prototype.draw=function(t){t.fillStyle=this.primaryColor,t.font=this.fontSize+"px "+this.font,t.fillText(this.text,this.x,this.y+this.height)},Label.prototype.tick=function(){},Label}(o.TextModule)},"./out/game/ui/Layout.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Layout",function(){return p}),i.d(e,"LayoutDirection",function(){return o}),i.d(e,"LayoutFloat",function(){return s}),i.d(e,"LayoutConstraint",function(){return r}),i.d(e,"LayoutAlignment",function(){return a});var n,o,s,r,a,u=i("./out/game/ui/Composite.js"),h=i("./out/engine/Main.js"),c=i("./out/game/ui/Constraint.js"),l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),p=function(t){function Layout(){var e=t.call(this)||this;e.layoutDirection=o.VERTICAL,e.justifyContent=a.START,e.alignItems=a.START,e.marginTop=0,e.marginBottom=0,e.marginLeft=0,e.marginRight=0,e.floatStyle=[s.NONE,s.NONE],e.constraints=[],e.drawBackground=!1,e.autoWidth=!0,e.autoHeight=!0,e.deltaX=0,e.deltaY=0,e.deltaW=0,e.deltaH=0;var i=function(){e.updateLayout()};return e.addTransformListener(i),h.Main.canvasBounds.addTransformListener(i),e.setPrimaryColor("#444444"),e}return l(Layout,t),Layout.prototype.updateLayout=function(){for(var t=function(t){var i=0,n=0,o=0,s=0;(e.stack.forEach(function(t){i=Math.max(i,t.getBounds().width),n=Math.max(n,t.getBounds().height),o+=t.getBounds().width,s+=t.getBounds().height}),e.updatePosition(),e.updateDimensions(i,n,o,s),e.handleConstraints(),e.bounds&&(e.bounds.width=e.width,e.bounds.height=e.height),e.updateChildPos(o,s),e.stack.forEach(function(t){t instanceof Layout&&t.updateLayout()}),e.parent)&&(0!=e.x-e.deltaX+e.y-e.deltaY+e.width-e.deltaW+e.height-e.deltaH&&(e.deltaX=e.x,e.deltaY=e.y,e.deltaW=e.width,e.deltaH=e.height,e.parent.updateLayout()))},e=this,i=0;i<2;i++)t()},Layout.prototype.updatePosition=function(){if(this.floatStyle[0]!=s.NONE||this.floatStyle[1]!=s.NONE)for(var t=this.parent?this.parent.x:0,e=this.parent?this.parent.x+this.parent.width:h.Main.CANVAS_WIDTH,i=this.parent?this.parent.y:0,n=this.parent?this.parent.y+this.parent.height:h.Main.CANVAS_HEIGHT,o=0;o<this.floatStyle.length;o++)switch(this.floatStyle[o]){case s.LEFT:this.x=t,this.updateBounds();break;case s.TOP:this.y=i,this.updateBounds();break;case s.RIGHT:this.x=e-this.width,this.updateBounds();break;case s.BOTTOM:this.y=n-this.height,this.updateBounds();break;case s.CENTER_H:this.x=h.Main.CANVAS_WIDTH/2-this.width/2,this.updateBounds();break;case s.CENTER_V:this.y=h.Main.CANVAS_HEIGHT/2-this.height/2,this.updateBounds()}},Layout.prototype.updateDimensions=function(t,e,i,n){if(this.autoWidth)switch(this.layoutDirection){case o.VERTICAL:this.width=this.marginLeft+t+this.marginRight;break;case o.HORIZONTAL:this.width=i+(this.marginLeft+this.marginRight)*this.stack.length}if(this.autoHeight)switch(this.layoutDirection){case o.VERTICAL:this.height=n+(this.marginTop+this.marginBottom)*this.stack.length;break;case o.HORIZONTAL:this.height=this.marginTop+e+this.marginBottom}},Layout.prototype.handleConstraints=function(){var t=this;0!=this.constraints.length&&this.constraints.forEach(function(e,i){var n=e.target.x-t.x,o=e.target.y-t.y;switch(e.subject){case r.RIGHT:n-=t.width;break;case r.BOTTOM:o-=t.height}switch(e.anchor){case r.RIGHT:n+=e.target.width;break;case r.BOTTOM:o+=e.target.height}e.subject==r.LEFT?t.x+=n:e.subject==r.TOP&&(t.y+=o),e.subject==r.LEFT?t.width-=n:e.subject==r.RIGHT&&(t.width+=n),e.subject==r.TOP?t.height-=o:e.subject==r.BOTTOM&&(t.height+=o)})},Layout.prototype.updateChildPos=function(t,e){var i=this,n=0,s=0;this.stack.forEach(function(r,u){var h=!1,c=!1;if(n+=r.getBounds().width,s+=r.getBounds().height,i.justifyContent!=a.START)switch(h=!0,i.layoutDirection){case o.VERTICAL:switch(i.justifyContent){case a.END:r.y=i.y+i.height-e+(s-r.getBounds().height);break;case a.CENTER:r.y=i.y+i.height/2-e/2+(s-r.getBounds().height)}break;case o.HORIZONTAL:switch(i.justifyContent){case a.END:r.x=i.x+i.width-t+(n-r.getBounds().width);break;case a.CENTER:r.x=i.x+i.width/2-t/2+(n-r.getBounds().width)}}if(i.alignItems!=a.START)switch(c=!0,i.layoutDirection){case o.VERTICAL:switch(i.alignItems){case a.END:r.x=i.x+i.width-r.getBounds().width-i.marginBottom;break;case a.CENTER:r.x=i.x+i.width/2-r.getBounds().width/2}break;case o.HORIZONTAL:switch(i.alignItems){case a.END:r.y=i.y+i.height-r.getBounds().height-i.marginRight;break;case a.CENTER:r.y=i.y+i.height/2-r.getBounds().height/2}}switch(i.layoutDirection){case o.VERTICAL:c||(r.x=i.x+i.marginLeft),h||(r.y=i.y+i.marginTop,r.y+=s-r.getBounds().height+u*(i.marginTop+i.marginBottom));break;case o.HORIZONTAL:c||(r.y=i.y+i.marginTop),h||(r.x=i.x+i.marginLeft,r.x+=n-r.getBounds().width+u*(i.marginLeft+i.marginRight))}r.updateBounds()})},Layout.prototype.addConstraint=function(t,e,i){var n=this,o=new c.Constraint(t,i,e,function(){n.updateLayout()});return this.constraints.push(o),e.addTransformListener(o.transformHandler),this.updateLayout(),o},Layout.prototype.removeConstraint=function(t){var e=this.constraints.indexOf(t),i=-1!=e;return i&&(this.constraints.splice(e,1),t.dispose(),this.updateLayout()),i},Layout.prototype.clearConstraints=function(){this.constraints.forEach(function(t){t.dispose()}),this.constraints=[],this.updateLayout()},Layout.prototype.setAutoWidth=function(t){this.autoWidth=t},Layout.prototype.setAutoHeight=function(t){this.autoHeight=t},Layout.prototype.setMargin=function(t){this.marginLeft=t,this.marginTop=t,this.marginRight=t,this.marginBottom=t,this.updateLayout()},Layout.prototype.setMarginLeft=function(t){this.marginLeft=t,this.updateLayout()},Layout.prototype.setMarginTop=function(t){this.marginTop=t,this.updateLayout()},Layout.prototype.setMarginRight=function(t){this.marginRight=t,this.updateLayout()},Layout.prototype.setMarginBottom=function(t){this.marginBottom=t,this.updateLayout()},Layout.prototype.setFloat=function(t,e){this.floatStyle=[t,e],this.updateLayout()},Layout.prototype.setLayoutDirection=function(t){this.layoutDirection=t,this.updateLayout()},Layout.prototype.setJustifyContent=function(t){this.justifyContent=t,this.updateLayout()},Layout.prototype.setAlignItems=function(t){this.alignItems=t,this.updateLayout()},Layout.prototype.addComponent=function(t){var e=this;t.setPrefferedCoordSpace(this.preferredCoordSpace);t.addTransformListener(function(){e.updateLayout()}),this.stack.push(t),t instanceof Layout&&(t.parent=this,this.updateLayout()),this.updateLayout()},Layout.prototype.draw=function(t){this.drawBackground&&(t.fillStyle=this.primaryColor,t.fillRect(this.x,this.y,this.width,this.height))},Layout}(u.Composite);!function(t){t[t.VERTICAL=0]="VERTICAL",t[t.HORIZONTAL=1]="HORIZONTAL"}(o||(o={})),function(t){t[t.NONE=0]="NONE",t[t.LEFT=1]="LEFT",t[t.TOP=2]="TOP",t[t.RIGHT=3]="RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.CENTER_H=5]="CENTER_H",t[t.CENTER_V=6]="CENTER_V"}(s||(s={})),function(t){t[t.LEFT=0]="LEFT",t[t.TOP=1]="TOP",t[t.RIGHT=2]="RIGHT",t[t.BOTTOM=3]="BOTTOM"}(r||(r={})),function(t){t[t.START=0]="START",t[t.END=1]="END",t[t.CENTER=2]="CENTER",t[t.STRETCH=3]="STRETCH"}(a||(a={}))},"./out/game/ui/LayoutManager.js":function(t,e,i){"use strict";i.r(e),i.d(e,"LayoutManager",function(){return n});var n=function(){return function(){}}()},"./out/game/ui/Panel.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Panel",function(){return r});var n,o=i("./out/game/Component.js"),s=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),r=function(t){function Panel(e,i,n,o){var s=t.call(this)||this;return s.setWidth(e),s.setHeight(i),n&&s.setX(n),o&&s.setY(o),s}return s(Panel,t),Panel.prototype.draw=function(t){t.fillStyle=this.primaryColor,t.fillRect(this.x,this.y,this.width,this.height)},Panel.prototype.tick=function(){},Panel}(o.Component)},"./out/game/ui/RasterPanel.js":function(t,e,i){"use strict";i.r(e),i.d(e,"RasterPanel",function(){return r});var n,o=i("./out/game/Component.js"),s=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),r=function(t){function RasterPanel(){var e=t.call(this)||this;return e.aspectGuard=!0,e.offX=0,e.offY=0,e}return s(RasterPanel,t),RasterPanel.prototype.setImageAsync=function(t,e){var i=this;this.image=new Image,this.image.onload=function(t){i.image&&(i.srcWidth=i.image.width,i.srcHeight=i.image.height,i.aspectRatio=i.srcWidth/i.srcHeight,0!=i.width||0!=i.height?(i.setWidth(i.width),i.setHeight(i.height)):(i.setWidth(i.srcWidth),i.setHeight(i.srcHeight)),e&&e(t))},this.image.src=t},RasterPanel.prototype.createBlankImage=function(t,e,i){var n=this;this.image=new Image(t,e),this.image.onload=function(t){n.image&&(n.srcWidth=n.image.width,n.srcHeight=n.image.height,n.aspectRatio=n.srcWidth/n.srcHeight,0!=n.width||0!=n.height?(n.setWidth(n.width),n.setHeight(n.height)):(n.setWidth(n.srcWidth),n.setHeight(n.srcHeight)),i&&i(t))}},RasterPanel.prototype.imageLoaded=function(){return!!this.image&&""!=this.image.src&&this.image.complete},RasterPanel.prototype.setWidth=function(t){this.width=t,!this.handleAspect()&&this.image&&(this.image.width=t),this.updateDrawOffset(),this.getBounds().width=this.width,this.triggerTransformListeners()},RasterPanel.prototype.setHeight=function(t){this.height=t,!this.handleAspect()&&this.image&&(this.image.height=t),this.updateDrawOffset(),this.getBounds().height=this.height,this.triggerTransformListeners()},RasterPanel.prototype.handleAspect=function(){return!(!this.aspectGuard||void 0==this.aspectRatio||!this.image)&&(this.image.width=this.width<this.height?this.width:this.height*this.aspectRatio,this.image.height=this.width>this.height?this.height:this.width*this.aspectRatio,!0)},RasterPanel.prototype.updateDrawOffset=function(){this.image&&(this.offX=this.width/2-this.image.width/2,this.offY=this.height/2-this.image.height/2)},RasterPanel.prototype.draw=function(t){this.imageLoaded()&&t.drawImage(this.image,this.x+this.offX,this.y+this.offY,this.image.width,this.image.height)},RasterPanel.prototype.tick=function(){},RasterPanel}(o.Component)},"./out/game/ui/Scale.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Scale",function(){return a});var n,o=i("./out/game/Component.js"),s=i("./out/game/ui/Label.js"),r=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),a=function(t){function Scale(e,i){var n=t.call(this)||this;return n.labelX=5,n.labelY=0,n.plateHeight=10,n.baseHeight=30,n.pistonWidth=14,n.setWidth(80),n.setHeight(60),n.setPrimaryColor("#dcdcdc"),n.setSecondaryColor("#333333"),n.label=new s.Label,n.label.setPrimaryColor("#333333"),n.label.setText("label"),e&&n.setX(e),i&&n.setY(i),n}return r(Scale,t),Scale.prototype.draw=function(t){var e=this.height-this.plateHeight-this.baseHeight;t.fillStyle=this.primaryColor,t.strokeStyle=this.secondaryColor;var i=this.x+this.width/2-this.pistonWidth/2,n=this.y+this.plateHeight;t.fillRect(i,n,this.pistonWidth,e),t.fillRect(this.x,this.y,this.width,this.plateHeight),t.strokeRect(this.x,this.y,this.width,this.plateHeight),i=this.x,n=this.y+this.plateHeight+e,t.fillRect(i,n,this.width,this.baseHeight),t.strokeRect(i,n,this.width,this.baseHeight),this.labelY=this.height-this.baseHeight/2-this.label.height/2,this.labelX=this.width/2-this.label.width/2,this.label.setX(this.x+this.labelX),this.label.setY(this.y+this.labelY),this.label.draw(t)},Scale.prototype.tick=function(){this.modX(this.vx)},Scale}(o.Component)},"./out/game/ui/TextArea.js":function(t,e,i){"use strict";i.r(e),i.d(e,"TextArea",function(){return c});var n,o=i("./out/game/ui/TextModule.js"),s=i("./out/engine/Main.js"),r=i("./out/game/Entity.js"),a=i("./out/util/Utils.js"),u=i("./out/maths/Point.js"),h=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),c=function(t){function TextArea(e,i,n){var o=t.call(this)||this;return o.lines=[],void 0!==e&&o.setText(e),void 0!=i&&o.setX(i),void 0!=n&&o.setY(n),o}return h(TextArea,t),TextArea.prototype.updateDimensions=function(){var t=this;this.textHeight=this.lines.length*this.lineHeight*this.fontSize;var e=0;this.lines.forEach(function(i){s.Main.g2.font=t.fontSize+"px "+t.font,e=Math.max(e,s.Main.g2.measureText(i).width)}),this.textWidth=e,this.getBounds().width=this.textWidth+this.marginLeft+this.marginRight,this.getBounds().height=this.textHeight+this.marginTop+this.marginBottom,this.triggerTransformListeners()},TextArea.prototype.setText=function(t){this.text=t,this.lines=this.text.split(/\n/),this.updateDimensions()},TextArea.prototype.appendText=function(t){this.text+=t,this.lines=this.text.split(/\n/),this.updateDimensions()},TextArea.prototype.draw=function(t){if(this.preferredCoordSpace==r.CoordSpace.WORLD_SPACE){var e=a.Utils.getInverseRotatedPos(new u.Point(0,2*this.y*s.Main.camera.vScale+this.textHeight*s.Main.camera.vScale)),i=s.Main.transform.clone();i.m21*=-1,i.m22*=-1,i.m31-=e.x,i.m32-=e.y,s.Main.setTransform(i)}t.fillStyle=this.textColor,t.font=this.fontSize+"px "+this.font;for(var n=0;n<this.lines.length;n++)this.lines[n]&&(t.fillText(this.lines[n],this.x+this.marginLeft,this.y+this.marginTop+this.lineHeight*this.fontSize*(n+1)),this.strokeText&&(t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.strokeText(this.lines[n],this.x+this.marginLeft,this.y+this.marginTop+this.lineHeight*this.fontSize*(n+1))))},TextArea.prototype.tick=function(){},TextArea}(o.TextModule)},"./out/game/ui/TextModule.js":function(t,e,i){"use strict";i.r(e),i.d(e,"TextModule",function(){return p}),i.d(e,"TextAlignment",function(){return o}),i.d(e,"Font",function(){return s});var n,o,s,r=i("./out/game/Component.js"),a=i("./out/engine/Main.js"),u=i("./out/util/Utils.js"),h=i("./out/util/Clipboard.js"),c=i("./out/game/ui/TextModuleHandler.js"),l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),p=function(t){function TextModule(){var e=null!==t&&t.apply(this,arguments)||this;return e.text="",e.placeholder="",e.fontSize=14,e.lineHeight=1,e.font=s.SOURCE_CODE_PRO,e.alignment=o.LEFT_TO_RIGHT,e.primaryColor="#cecece",e.secondaryColor="#545454",e.textColor="#333333",e.selectedColor="#2188ff",e.highlightColor="#000000",e.strokeColor="#000000",e.strokeText=!1,e.strokeWidth=1,e.cursorIndex=0,e.cursorColor="#333333",e.cursorBlink=800,e.cursorWidth=1,e.cursorX=0,e.offsetX=0,e.behindCursor="",e.pastCursor="",e.behindCursorWidth=0,e.pastCursorWidth=0,e.textWidth=0,e.textHeight=e.fontSize,e.marginLeft=0,e.marginTop=0,e.marginRight=0,e.marginBottom=0,e.selection="",e.selectionRange=[0,0],e.hasSelection=!1,e.isInputModule=!1,e.selected=!1,e.textmoduleHandler=e.addHandler(new c.TextModuleHandler(e)),e}return l(TextModule,t),TextModule.prototype.updateDimensions=function(){this.applyFont();var t=this.text.length>0?this.text:this.placeholder;this.textWidth=a.Main.g2.measureText(t).width,this.textHeight=this.fontSize,this.triggerTransformListeners()},TextModule.prototype.applyFont=function(){a.Main.g2.font=this.fontSize+"px "+this.font},TextModule.prototype.setCursorIndex=function(t){this.cursorIndex=u.Utils.clamp(t,0,this.text.length),this.behindCursor=this.text.substr(0,this.cursorIndex),this.pastCursor=this.text.substr(this.cursorIndex),this.updateCursor()},TextModule.prototype.modCursorIndex=function(t){this.setCursorIndex(this.cursorIndex+t)},TextModule.prototype.updateCursor=function(){switch(this.applyFont(),this.behindCursorWidth=a.Main.g2.measureText(this.behindCursor).width,this.pastCursorWidth=a.Main.g2.measureText(this.pastCursor).width,this.alignment){case o.LEFT_TO_RIGHT:this.cursorX=this.behindCursorWidth+this.x+this.marginLeft+this.offsetX;break;case o.RIGHT_TO_LEFT:this.cursorX=this.x+this.marginLeft+this.getInnerWidth()-this.pastCursorWidth+this.offsetX}var t=this.cursorX-this.x-this.marginLeft,e=this.cursorX-this.x-this.width+this.marginRight;t<0&&(this.offsetX-=t,this.cursorX-=t),e>0&&(this.offsetX-=e,this.cursorX-=e)},TextModule.prototype.setCursorClosestTo=function(t){var e=0;switch(this.alignment){case o.LEFT_TO_RIGHT:e=t.x-this.x-this.marginLeft-this.offsetX;break;case o.RIGHT_TO_LEFT:e=this.textWidth-this.offsetX-(this.getInnerWidth()-(t.x-this.x-this.marginLeft))}if(e>=this.textWidth-this.widthOfTextRange(this.text.length-1,this.text.length)/2)this.setCursorIndex(this.text.length);else{var i=0,n=Number.MAX_SAFE_INTEGER,s=Number.MAX_SAFE_INTEGER-1;for(this.applyFont();s<n&&i<=this.text.length;)n=s,s=Math.abs(e-a.Main.g2.measureText(this.text.substr(0,i)).width),i++;this.setCursorIndex(i-2)}},TextModule.prototype.updateSelection=function(){var t=this.getSelectionRange();this.selection=this.text.substring(t[0],t[1]),h.Clipboard.setCopyData(this.selection),this.hasSelection=this.selection.length>0},TextModule.prototype.widthOfTextRange=function(t,e){return this.applyFont(),a.Main.g2.measureText(this.text.substring(t,e)).width},TextModule.prototype.xOfIndex=function(t){var e=0;switch(this.alignment){case o.LEFT_TO_RIGHT:e=this.widthOfTextRange(0,t)+this.x+this.marginLeft+this.offsetX;break;case o.RIGHT_TO_LEFT:e=this.x+this.marginLeft+this.getInnerWidth()-(this.widthOfTextRange(t,this.text.length)-this.offsetX)}return e},TextModule.prototype.measureString=function(t){return this.applyFont(),a.Main.g2.measureText(t)},TextModule.prototype.selectAll=function(){this.selectionRange=[0,this.text.length],this.updateSelection(),this.setCursorIndex(this.text.length)},TextModule.prototype.deselectAll=function(){this.selectionRange=[0,0],this.updateSelection()},TextModule.prototype.appendText=function(t,e,i){if(void 0===e&&(e=this.text.length),void 0===i&&(i=!1),!i&&this.selection.length>0){var n=this.getSelectionRange();this.text=u.Utils.cutString(this.text,n[0],n[1]),this.setCursorIndex(n[0]),e=n[0],this.deselectAll()}this.text=this.text.substr(0,e)+t+this.text.substr(e),this.updateDimensions()},TextModule.prototype.setText=function(t){this.text=t,this.updateDimensions()},TextModule.prototype.setPlaceholder=function(t){this.placeholder=t,this.updateDimensions()},TextModule.prototype.setFontSize=function(t){this.fontSize=t,this.updateDimensions()},TextModule.prototype.setLineHeight=function(t){this.lineHeight=t,this.updateDimensions()},TextModule.prototype.setFont=function(t,e){this.font=t,void 0!=e?this.setFontSize(e):this.updateDimensions()},TextModule.prototype.setTextAlignment=function(t){this.alignment=t},TextModule.prototype.setFilter=function(t){this.filter=t},TextModule.prototype.setTextColor=function(t){this.textColor=t},TextModule.prototype.setSelected=function(t){this.selected=t},TextModule.prototype.deselectText=function(){this.selectionRange=[0,0],this.selection="",this.hasSelection=this.selection.length>0},TextModule.prototype.setInputModule=function(t){this.isInputModule=t,t||this.setSelected(!1)},TextModule.prototype.setMargin=function(t){this.marginLeft=this.marginTop=this.marginRight=this.marginBottom=t},TextModule.prototype.setMarginLeft=function(t){this.marginLeft=t},TextModule.prototype.setMarginTop=function(t){this.marginRight=t},TextModule.prototype.setMarginRight=function(t){this.marginRight=t},TextModule.prototype.setMarginBottom=function(t){this.marginBottom=t},TextModule.prototype.getMarginLeft=function(){return this.marginLeft},TextModule.prototype.getMarginTop=function(){return this.marginTop},TextModule.prototype.getMarginRight=function(){return this.marginRight},TextModule.prototype.getMarginBottom=function(){return this.marginBottom},TextModule.prototype.getText=function(){return this.text},TextModule.prototype.getPlaceholder=function(){return this.placeholder},TextModule.prototype.getFontSize=function(){return this.fontSize},TextModule.prototype.getFont=function(){return this.font},TextModule.prototype.getTextAlignment=function(){return this.alignment},TextModule.prototype.getSelection=function(){return this.selection},TextModule.prototype.getSelectionRange=function(){return[Math.min(this.selectionRange[0],this.selectionRange[1]),Math.max(this.selectionRange[0],this.selectionRange[1])]},TextModule.prototype.getInnerWidth=function(){return this.width-this.marginLeft-this.marginRight},TextModule}(r.Component);!function(t){t[t.LEFT_TO_RIGHT=0]="LEFT_TO_RIGHT",t[t.RIGHT_TO_LEFT=1]="RIGHT_TO_LEFT",t[t.CENTERED=2]="CENTERED"}(o||(o={})),function(t){t.ANTIQUA="Book Antiqua",t.GEORGIA="Georgia",t.PALATINO="Palatino Linotype",t.SERIF="serif",t.TIMES_NEW_ROMAN="Times New Roman",t.ARIAL="Arial",t.ARIAL_BLACK="Arial Black",t.CHARCOAL="Charcoal",t.GADGET="Gadget",t.GENEVA="Geneva",t.HELVETICA="Helvetica",t.IMPACT="Impact",t.LUCIDA_SANS="Lucida Sans Unicode",t.ROBOTO_BOLD="Roboto Bold",t.ROBOTO_REGULAR="Roboto",t.ROBOTO_THIN="Roboto Thin",t.SANS_SERIF="sans-serif",t.TAHOMA="Tahoma",t.TREBUCHET="Trebuchet MS",t.VERDANA="Verdana",t.CONSOLAS="Consolas",t.COURIER_NEW="Courier New",t.LUCIDA_CONSOLE="Lucida Console",t.MONOSPACE="monospace",t.SOURCE_CODE_PRO="Source Code Pro"}(s||(s={}))},"./out/game/ui/TextModuleHandler.js":function(t,e,i){"use strict";i.r(e),i.d(e,"TextModuleHandler",function(){return l});var n,o=i("./out/util/Handler.js"),s=i("./out/game/ui/TextModule.js"),r=i("./out/util/KeyHandler.js"),a=i("./out/util/Clipboard.js"),u=i("./out/util/MouseHandler.js"),h=i("./out/util/Utils.js"),c=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),l=function(t){function TextModuleHandler(e){var i=t.call(this,e)||this;return i.parent=e,i.initListeners(),i}return c(TextModuleHandler,t),TextModuleHandler.prototype.initListeners=function(){var t=this;this.getKeyHandler().keyPressed=function(e){t.parent.isInputModule&&t.parent.selected&&(e.ctrlKey||(t.parent.filter&&null===e.key.match(t.parent.filter)?r.KeyHandler.preventDefault():(t.parent.appendText(e.key,t.parent.cursorIndex),t.parent.modCursorIndex(1),t.parent.selectionRange[0]=t.parent.cursorIndex,t.parent.onInput&&t.parent.onInput(),r.KeyHandler.preventDefault())))},this.getKeyHandler().keyDown=function(e){if(t.parent.isInputModule&&t.parent.selected){if("ArrowLeft"==e.key&&(t.parent.modCursorIndex(-1),e.shiftKey?(t.parent.selectionRange[1]=t.parent.cursorIndex,t.parent.updateSelection()):(t.parent.deselectAll(),t.parent.selectionRange[0]=t.parent.cursorIndex),r.KeyHandler.preventDefault()),"ArrowRight"==e.key&&(t.parent.modCursorIndex(1),e.shiftKey?(t.parent.selectionRange[1]=t.parent.cursorIndex,t.parent.updateSelection()):(t.parent.deselectAll(),t.parent.selectionRange[0]=t.parent.cursorIndex),r.KeyHandler.preventDefault()),"Home"==e.key&&(t.parent.setCursorIndex(0),e.shiftKey?(t.parent.selectionRange[1]=t.parent.cursorIndex,t.parent.updateSelection()):(t.parent.deselectAll(),t.parent.selectionRange[0]=t.parent.cursorIndex),r.KeyHandler.preventDefault()),"End"==e.key&&(t.parent.setCursorIndex(t.parent.text.length),e.shiftKey?(t.parent.selectionRange[1]=t.parent.cursorIndex,t.parent.updateSelection()):(t.parent.deselectAll(),t.parent.selectionRange[0]=t.parent.cursorIndex),r.KeyHandler.preventDefault()),"Backspace"==e.key){if(t.parent.selection.length>0)t.parent.appendText("",t.parent.cursorIndex);else{var i=0;switch(0!=t.parent.offsetX&&(i=t.parent.widthOfTextRange(t.parent.cursorIndex-1,t.parent.cursorIndex)),t.parent.text=h.Utils.cutStr(t.parent.text,t.parent.cursorIndex-1,1),t.parent.modCursorIndex(-1),t.parent.getTextAlignment()){case s.TextAlignment.LEFT_TO_RIGHT:t.parent.offsetX+=i,t.parent.offsetX>0&&(t.parent.offsetX=0);break;case s.TextAlignment.RIGHT_TO_LEFT:}t.parent.updateDimensions(),t.parent.updateCursor()}t.parent.onInput&&t.parent.onInput(),r.KeyHandler.preventDefault()}if("Delete"==e.key&&(t.parent.text=h.Utils.cutStr(t.parent.text,t.parent.cursorIndex,1),t.parent.updateDimensions(),t.parent.updateCursor(),t.parent.onInput&&t.parent.onInput(),r.KeyHandler.preventDefault()),"Tab"==e.key&&(t.parent.appendText("    ",t.parent.cursorIndex),t.parent.modCursorIndex(4),e.preventDefault()),"c"==e.key&&e.ctrlKey&&t.parent.selection.length>0&&r.KeyHandler.preventDefault(),"v"==e.key&&e.ctrlKey){var n=a.Clipboard.getPasteData();n.length>0&&(t.parent.appendText(n,t.parent.cursorIndex),t.parent.modCursorIndex(n.length)),t.parent.onInput&&t.parent.onInput(),r.KeyHandler.preventDefault()}"x"==e.key&&e.ctrlKey&&t.parent.selection.length>0&&(t.parent.selection.length>0&&t.parent.appendText("",t.parent.cursorIndex),t.parent.onInput&&t.parent.onInput(),r.KeyHandler.preventDefault()),"a"==e.key&&e.ctrlKey&&(t.parent.selectAll(),r.KeyHandler.preventDefault())}},this.getMouseHandler().mouseEntered=function(e){t.parent.isInputModule&&u.MouseHandler.setCursor(u.Cursor.TEXT)},this.getMouseHandler().mouseExited=function(e){t.parent.isInputModule&&u.MouseHandler.setCursor(u.Cursor.DEFAULT)},this.getMouseHandler().mouseLeftDown=function(e){t.parent.isInputModule&&(t.parent.setSelected(!0),t.parent.setCursorClosestTo(e),t.parent.deselectText(),t.parent.selectionRange[0]=t.parent.cursorIndex)},this.getMouseHandler().mouseDownOffBounds=function(e){t.parent.isInputModule&&(t.parent.setSelected(!1),t.parent.deselectText())},this.getMouseHandler().mouseDragging=function(e){t.parent.setCursorClosestTo(e.point),e.point.x<t.parent.x+t.parent.getMarginLeft()&&t.parent.modCursorIndex(-1),e.point.x>t.parent.x+t.parent.width-t.parent.getMarginRight()&&t.parent.modCursorIndex(1),t.parent.selectionRange[1]=t.parent.cursorIndex,t.parent.updateSelection()}},TextModuleHandler}(o.Handler)},"./out/game/ui/Texture.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Texture",function(){return r});var n,o=i("./out/game/Component.js"),s=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),r=function(t){function Texture(e,i){var n=t.call(this)||this;return n.canvas=document.createElement("canvas"),n.addTransformListener(function(){n.canvas.width=n.width,n.canvas.height=n.height}),n.setWidth(e),n.setHeight(i),n.g2=n.canvas.getContext("2d"),n}return s(Texture,t),Texture.prototype.clear=function(){this.g2.clearRect(0,0,this.canvas.width,this.canvas.height)},Texture.prototype.draw=function(t){t.drawImage(this.g2.canvas,this.x,this.y)},Texture.prototype.tick=function(){},Texture}(o.Component);
/*
 * Copyright (C) 2018 Sindre T. Strøm
 *
 * This file is part of strum-2d.
 *
 * strum-2d is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * strum-2d is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with strum-2d.  If not, see <http://www.gnu.org/licenses/>.
 */},"./out/index.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Strum2dIndex",function(){return rt});var n=i("./out/index.js"),o=i("./out/engine/Camera.js");i.d(e,"Camera",function(){return o.Camera});var s=i("./out/engine/Graphics2D.js");i.d(e,"Graphics2D",function(){return s.Graphics2D});var r=i("./out/engine/Main.js");i.d(e,"Main",function(){return r.Main});var a=i("./out/game/Character.js");i.d(e,"Character",function(){return a.Character});var u=i("./out/game/Component.js");i.d(e,"Component",function(){return u.Component});var h=i("./out/game/Entity.js");i.d(e,"Entity",function(){return h.IEntity});var c=i("./out/game/Particle.js");i.d(e,"Particle",function(){return c.Particle});var l=i("./out/game/ParticleCluster.js");i.d(e,"ParticleCluster",function(){return l.ParticleCluster}),i.d(e,"ClusterConnectionStyle",function(){return l.ClusterConnectionStyle});var p=i("./out/game/Player.js");i.d(e,"Player",function(){return p.Player});var d=i("./out/game/Scene.js");i.d(e,"Scene",function(){return d.Scene});var f=i("./out/game/ui/BarGraph.js");i.d(e,"BarGraph",function(){return f.BarGraph});var y=i("./out/game/ui/Button.js");i.d(e,"Button",function(){return y.Button});var m=i("./out/game/ui/Graph.js");i.d(e,"Graph",function(){return m.Graph});var g=i("./out/game/ui/Composite.js");i.d(e,"Composite",function(){return g.Composite});var M=i("./out/game/ui/InputField.js");i.d(e,"InputField",function(){return M.InputField});var x=i("./out/game/ui/Label.js");i.d(e,"Label",function(){return x.Label});var v=i("./out/game/ui/Layout.js");i.d(e,"Layout",function(){return v.Layout}),i.d(e,"LayoutDirection",function(){return v.LayoutDirection}),i.d(e,"LayoutFloat",function(){return v.LayoutFloat}),i.d(e,"LayoutConstraint",function(){return v.LayoutConstraint}),i.d(e,"LayoutAlignment",function(){return v.LayoutAlignment});var S=i("./out/game/ui/LayoutManager.js");i.d(e,"LayoutManager",function(){return S.LayoutManager});var C=i("./out/game/ui/Panel.js");i.d(e,"Panel",function(){return C.Panel});var w=i("./out/game/ui/RasterPanel.js");i.d(e,"RasterPanel",function(){return w.RasterPanel});var T=i("./out/game/ui/Scale.js");i.d(e,"Scale",function(){return T.Scale});var _=i("./out/game/ui/TextArea.js");i.d(e,"TextArea",function(){return _.TextArea});var E=i("./out/game/ui/TextModule.js");i.d(e,"TextModule",function(){return E.TextModule}),i.d(e,"TextAlignment",function(){return E.TextAlignment}),i.d(e,"Font",function(){return E.Font});var R=i("./out/game/ui/TextModuleHandler.js");i.d(e,"TextModuleHandler",function(){return R.TextModuleHandler});var P=i("./out/game/ui/Texture.js");i.d(e,"Texture",function(){return P.Texture});var L=i("./out/maths/IntersectTypes.js");i.d(e,"IntersectTypes",function(){return L.IntersectTypes});var b=i("./out/maths/Matrix3.js");i.d(e,"Matrix3",function(){return b.Matrix3});var I=i("./out/maths/PerlinNoise.js");i.d(e,"PerlinNoise",function(){return I.PerlinNoise});var H=i("./out/maths/Point.js");i.d(e,"Point",function(){return H.Point});var O=i("./out/maths/Random.js");i.d(e,"Random",function(){return O.Random});var N=i("./out/maths/Rectangle.js");i.d(e,"Rectangle",function(){return N.Rectangle});var j=i("./out/maths/Segment.js");i.d(e,"Segment",function(){return j.Segment});var k=i("./out/maths/SegmentIntersectionEvent.js");i.d(e,"SegmentIntersectionEvent",function(){return k.SegmentIntersectionEvent});var A=i("./out/maths/SimplexNoise.js");i.d(e,"SimplexNoise",function(){return A.SimplexNoise});var D=i("./out/maths/Vector2.js");i.d(e,"Vector2",function(){return D.Vector2});var B=i("./out/maths/Vector3.js");i.d(e,"Vector3",function(){return B.Vector3});var U=i("./out/physics/CollisionBounds.js");i.d(e,"CollisionBounds",function(){return U.CollisionBounds});var F=i("./out/physics/CollisionEvent.js");i.d(e,"CollisionEvent",function(){return F.CollisionEvent});var G=i("./out/physics/CollisionHandler.js");i.d(e,"CollisionHandler",function(){return G.CollisionHandler});var V=i("./out/physics/CollisionType.js");i.d(e,"CollisionType",function(){return V.CollisionType});var z=i("./out/physics/Ray.js");i.d(e,"Ray",function(){return z.Ray});var W=i("./out/physics/RayCastResult.js");i.d(e,"RayCastResult",function(){return W.RayCastResult});var X=i("./out/physics/RayPlacement.js");i.d(e,"RayPlacement",function(){return X.RayPlacement});var Y=i("./out/util/Clipboard.js");i.d(e,"Clipboard",function(){return Y.Clipboard});var K=i("./out/util/Color.js");i.d(e,"Color",function(){return K.Color});var Z=i("./out/util/CssUtils.js");i.d(e,"CssUtils",function(){return Z.CssUtils});var q=i("./out/util/Handler.js");i.d(e,"Handler",function(){return q.Handler});var Q=i("./out/util/Input.js");i.d(e,"Input",function(){return Q.Input});var J=i("./out/util/KeyHandler.js");i.d(e,"KeyHandler",function(){return J.KeyHandler});var $=i("./out/util/MouseHandler.js");i.d(e,"MouseHandler",function(){return $.MouseHandler}),i.d(e,"MouseButton",function(){return $.MouseButton}),i.d(e,"Cursor",function(){return $.Cursor});var tt=i("./out/util/MouseMoveEvent.js");i.d(e,"MouseMoveEvent",function(){return tt.MouseMoveEvent});var et=i("./out/util/MultiKeyEvent.js");i.d(e,"MultiKeyEvent",function(){return et.MultiKeyEvent});var it=i("./out/util/MultiMouseEvent.js");i.d(e,"MultiMouseEvent",function(){return it.MultiMouseEvent});var nt=i("./out/util/Utils.js");i.d(e,"Utils",function(){return nt.Utils});var ot=i("./out/BrowserWarning.js");i.d(e,"BrowserWarning",function(){return ot.BrowserWarning});var st=i("./out/DebugUi.js");i.d(e,"DebugUi",function(){return st.DebugUi});var rt=function(){return function(){}}();window._root=location.href.substr(0,location.href.lastIndexOf("/")),window.main=new n.Main,window.camera=n.Main.camera,window.Main=n.Main,window.Utils=n.Utils},"./out/maths/IntersectTypes.js":function(t,e,i){"use strict";var n;i.r(e),i.d(e,"IntersectTypes",function(){return n}),function(t){t[t.DONT_INTERSECT=0]="DONT_INTERSECT",t[t.COLLINEAR=1]="COLLINEAR",t[t.DO_INTERSECT=2]="DO_INTERSECT"}(n||(n={}))},"./out/maths/Matrix3.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Matrix3",function(){return n});var n=function(){function Matrix3(t,e,i,n,o,s,r,a,u){this.m11=1,this.m12=0,this.m13=0,this.m21=0,this.m22=1,this.m23=0,this.m31=0,this.m32=0,this.m33=1,void 0!==t&&(this.m11=t),void 0!==e&&(this.m12=e),void 0!==i&&(this.m13=i),void 0!==n&&(this.m21=n),void 0!==o&&(this.m22=o),void 0!==s&&(this.m23=s),void 0!==r&&(this.m31=r),void 0!==a&&(this.m32=a),void 0!==u&&(this.m33=u)}return Matrix3.prototype.update=function(t,e,i,n,o,s,r,a,u){void 0!==t&&(this.m11=t),void 0!==e&&(this.m12=e),void 0!==i&&(this.m13=i),void 0!==n&&(this.m21=n),void 0!==o&&(this.m22=o),void 0!==s&&(this.m23=s),void 0!==r&&(this.m31=r),void 0!==a&&(this.m32=a),void 0!==u&&(this.m33=u)},Matrix3.prototype.clone=function(){return new Matrix3(this.m11,this.m12,this.m13,this.m21,this.m22,this.m23,this.m31,this.m32,this.m33)},Matrix3.getUniform=function(){return new Matrix3(1,0,0,0,1,0,0,0,1)},Matrix3}()},"./out/maths/PerlinNoise.js":function(t,e,i){"use strict";i.r(e),i.d(e,"PerlinNoise",function(){return n});var n=function(){function PerlinNoise(){}return PerlinNoise.octaveNoise=function(t,e,i,n,o,s){void 0===e&&(e=0),void 0===i&&(i=0),void 0===n&&(n=1),void 0===o&&(o=1),void 0===s&&(s=1);var r=0,a=1,u=0;t/=100,e/=100,i/=100;for(var h=0;h<n;h++)r+=(PerlinNoise.noise(t*o,e*o,i*o)+1)/2*a,u+=a,a*=s,o*=2;return r/u},PerlinNoise.noise=function(t,e,i){var n=255&Math.floor(t),o=255&Math.floor(e),s=255&Math.floor(i);t-=Math.floor(t),e-=Math.floor(e),i-=Math.floor(i);var r=PerlinNoise.fade(t),a=PerlinNoise.fade(e),u=PerlinNoise.fade(i),h=PerlinNoise.p[n]+o,c=PerlinNoise.p[h]+s,l=PerlinNoise.p[h+1]+s,p=PerlinNoise.p[n+1]+o,d=PerlinNoise.p[p]+s,f=PerlinNoise.p[p+1]+s;return PerlinNoise.lerp(u,PerlinNoise.lerp(a,PerlinNoise.lerp(r,PerlinNoise.grad(PerlinNoise.p[c],t,e,i),PerlinNoise.grad(PerlinNoise.p[d],t-1,e,i)),PerlinNoise.lerp(r,PerlinNoise.grad(PerlinNoise.p[l],t,e-1,i),PerlinNoise.grad(PerlinNoise.p[f],t-1,e-1,i))),PerlinNoise.lerp(a,PerlinNoise.lerp(r,PerlinNoise.grad(PerlinNoise.p[c+1],t,e,i-1),PerlinNoise.grad(PerlinNoise.p[d+1],t-1,e,i-1)),PerlinNoise.lerp(r,PerlinNoise.grad(PerlinNoise.p[l+1],t,e-1,i-1),PerlinNoise.grad(PerlinNoise.p[f+1],t-1,e-1,i-1))))},PerlinNoise.fade=function(t){return t*t*t*(t*(6*t-15)+10)},PerlinNoise.lerp=function(t,e,i){return e+t*(i-e)},PerlinNoise.grad=function(t,e,i,n){var o=15&t,s=o<8?e:i,r=o<4?i:12==o||14==o?e:n;return(0==(1&o)?s:-s)+(0==(2&o)?r:-r)},PerlinNoise.p=new Array(512),PerlinNoise.permutation=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],PerlinNoise._constructor=function(){for(var t=0;t<256;t++)PerlinNoise.p[256+t]=PerlinNoise.p[t]=PerlinNoise.permutation[t]}(),PerlinNoise}()},"./out/maths/Point.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Point",function(){return n});var n=function(){function Point(t,e){this.x=0,this.y=0,t&&(this.x=t),e&&(this.y=e)}return Point.prototype.toString=function(t){var e=String(this.x),i=String(this.y);return void 0!=t&&(e=this.x.toFixed(t),i=this.y.toFixed(t)),"("+e+", "+i+")"},Point.prototype.draw=function(t,e){var i=e||3;t.beginPath(),t.arc(this.x,this.y,i,0,2*Math.PI,!1),t.fill()},Point}()},"./out/maths/Random.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Random",function(){return n});var n=function(){function Random(t){this.seed=Math.floor(2147483647*Math.random()),void 0!=t&&this.setSeed(t)}return Random.prototype.setSeed=function(t){this.seed=t%2147483647,this.seed<=0&&(this.seed+=2147483646)},Random.prototype.nextFloat=function(){return this.setSeed(16807*this.seed%2147483647),this.seed/2147483647},Random.prototype.nextInt=function(t,e){return this.setSeed(16807*this.seed%2147483647),void 0==e?Math.floor(this.seed/2147483647*t):Math.floor(this.seed/2147483647*(e-t)+t)},Random}()},"./out/maths/Rectangle.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Rectangle",function(){return o});var n=i("./out/util/Utils.js"),o=function(){function Rectangle(t,e,i,n){this.x=0,this.y=0,this.width=t,this.height=e,i&&(this.x=i),n&&(this.y=n)}return Rectangle.prototype.contains=function(t){return t.x>=this.x&&t.x<=this.x+this.width&&t.y>=this.y&&t.y<=this.y+this.height},Rectangle.prototype.rectIntersect=function(t){return n.Utils.rangeIntersect(this.x,this.x+this.width,t.x,t.x+t.width)&&n.Utils.rangeIntersect(this.y,this.y+this.height,t.y,t.y+t.height)},Rectangle.prototype.clone=function(){return new Rectangle(this.width,this.height,this.x,this.y)},Rectangle.prototype.draw=function(t){t.strokeRect(this.x,this.y,this.width,this.height)},Rectangle}()},"./out/maths/Segment.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Segment",function(){return u});var n=i("./out/maths/Point.js"),o=i("./out/maths/Vector2.js"),s=i("./out/maths/SegmentIntersectionEvent.js"),r=i("./out/util/Utils.js"),a=i("./out/maths/IntersectTypes.js"),u=function(){function Segment(t,e,i,n){this.x=t,this.y=e,this.vecX=i,this.vecY=n}return Segment.prototype.update=function(t,e,i,n){void 0!==t&&(this.x=t),void 0!==e&&(this.y=e),void 0!==i&&(this.vecX=i),void 0!==n&&(this.vecY=n)},Segment.prototype.draw=function(t){t.beginPath(),t.moveTo(this.x,this.y),t.lineTo(this.x+this.vecX,this.y+this.vecY),t.stroke()},Segment.prototype.getLength=function(){return Math.sqrt(this.vecX*this.vecX+this.vecY*this.vecY)},Segment.prototype.getNormal=function(){var t=this.y,e=this.x+this.vecX,i=this.x;return new Segment(t,e,this.y+this.vecY-t,i-e)},Segment.prototype.getCenter=function(){var t=this.x+this.x+this.vecX,e=this.y+this.y+this.vecY;return new n.Point(t/2,e/2)},Segment.prototype.getUnit=function(){return new Segment(0,0,this.vecX/this.getLength(),this.vecY/this.getLength())},Segment.prototype.getVector=function(){return new o.Vector2(this.vecX,this.vecY)},Segment.prototype.multiply=function(t){this.vecX*=t,this.vecY*=t},Segment.prototype.divide=function(t){this.vecX/=t,this.vecY/=t},Segment.prototype.resize=function(t){this.multiply(1+t/this.getLength())},Segment.prototype.clone=function(){return new Segment(this.x,this.y,this.vecX,this.vecY)},Segment.prototype.intersect=function(t){var e,i,n,o,u,h,c,l,p,d,f,y,m,g,M,x=this.x,v=this.y,S=this.x+this.vecX,C=this.y+this.vecY,w=t.x,T=t.y,_=t.x+t.vecX,E=t.y+t.vecY;return d=(e=C-v)*_+(n=x-S)*E+(u=S*v-x*C),0!=(p=e*w+n*T+u)&&0!=d&&r.Utils.sameSign(p,d)?new s.SegmentIntersectionEvent(this,t,a.IntersectTypes.DONT_INTERSECT):(l=(i=E-T)*S+(o=w-_)*C+(h=_*T-w*E),0!=(c=i*x+o*v+h)&&0!=l&&r.Utils.sameSign(c,l)?new s.SegmentIntersectionEvent(this,t,a.IntersectTypes.DONT_INTERSECT):0==(f=e*o-i*n)?new s.SegmentIntersectionEvent(this,t,a.IntersectTypes.COLLINEAR):(y=f<0?-f/2:f/2,g=(m=n*h-o*u)<0?(m-y)/f:(m+y)/f,M=(m=i*u-e*h)<0?(m-y)/f:(m+y)/f,new s.SegmentIntersectionEvent(this,t,a.IntersectTypes.DO_INTERSECT,g,M)))},Segment}()},"./out/maths/SegmentIntersectionEvent.js":function(t,e,i){"use strict";i.r(e),i.d(e,"SegmentIntersectionEvent",function(){return o});var n=i("./out/maths/Point.js"),o=function(){return function(t,e,i,o,s,r){if(this.parent=t,this.target=e,this.type=i,o&&s){this.intersection=new n.Point(o,s);var a=t.x-o,u=t.y-s;this.distance=Math.sqrt(a*a+u*u)}r&&(this.targetObject=r)}}()},"./out/maths/SimplexNoise.js":function(t,e,i){"use strict";i.r(e),i.d(e,"SimplexNoise",function(){return o});var n=function(){return function(t,e,i,n){this.x=t,this.y=e,this.z=i,void 0!=n&&(this.w=n)}}(),o=function(){function SimplexNoise(){}return SimplexNoise.octaveNoise=function(t,e,i,n){void 0===e&&(e=1),void 0===i&&(i=1),void 0===n&&(n=1);var o=0,s=1,r=0,a=void 0!=t.z,u=void 0!=t.w;t.x=void 0!=t.x?t.x/100*i:0,t.y=void 0!=t.y?t.y/100*i:0,t.z=void 0!=t.z?t.z/100*i:0,t.w=void 0!=t.w?t.w/100*i:0;for(var h=0;h<e;h++){o+=u?(SimplexNoise.noise4d(t.x*i,t.y*i,t.z*i,t.w*i)+1)/2*s:a?(SimplexNoise.noise3d(t.x*i,t.y*i,t.z*i)+1)/2*s:(SimplexNoise.noise2d(t.x*i,t.y*i)+1)/2*s,r+=s,s*=n,i*=2}return o/r},SimplexNoise.fastFloor=function(t){return~~t},SimplexNoise.dot=function(t,e,i,n,o){return void 0!=n&&void 0!=o?t.x*e+t.y*i+t.z*n+t.w*o:void 0!=n?t.x*e+t.y*i+t.z*n:t.x*e+t.y*i},SimplexNoise.noise2d=function(t,e){var i,n,o=(t+e)*SimplexNoise.F2,s=SimplexNoise.fastFloor(t+o),r=SimplexNoise.fastFloor(e+o),a=(s+r)*SimplexNoise.G2,u=t-(s-a),h=e-(r-a);u>h?(i=1,n=0):(i=0,n=1);var c=u-i+SimplexNoise.G2,l=h-n+SimplexNoise.G2,p=u-1+2*SimplexNoise.G2,d=h-1+2*SimplexNoise.G2,f=255&s,y=255&r,m=SimplexNoise.permMod12[f+SimplexNoise.perm[y]],g=SimplexNoise.permMod12[f+i+SimplexNoise.perm[y+n]],M=SimplexNoise.permMod12[f+1+SimplexNoise.perm[y+1]],x=.5-u*u-h*h,v=.5-c*c-l*l,S=.5-p*p-d*d;return 70*((x<0?0:(x*=x)*x*SimplexNoise.dot(SimplexNoise.grad3[m],u,h))+(v<0?0:(v*=v)*v*SimplexNoise.dot(SimplexNoise.grad3[g],c,l))+(S<0?0:(S*=S)*S*SimplexNoise.dot(SimplexNoise.grad3[M],p,d)))},SimplexNoise.noise3d=function(t,e,i){var n,o,s,r,a,u,h=(t+e+i)*SimplexNoise.F3,c=SimplexNoise.fastFloor(t+h),l=SimplexNoise.fastFloor(e+h),p=SimplexNoise.fastFloor(i+h),d=(c+l+p)*SimplexNoise.G3,f=t-(c-d),y=e-(l-d),m=i-(p-d);f>=y?y>=m?(n=1,o=0,s=0,r=1,a=1,u=0):f>=m?(n=1,o=0,s=0,r=1,a=0,u=1):(n=0,o=0,s=1,r=1,a=0,u=1):y<m?(n=0,o=0,s=1,r=0,a=1,u=1):f<m?(n=0,o=1,s=0,r=0,a=1,u=1):(n=0,o=1,s=0,r=1,a=1,u=0);var g=f-n+SimplexNoise.G3,M=y-o+SimplexNoise.G3,x=m-s+SimplexNoise.G3,v=f-r+2*SimplexNoise.G3,S=y-a+2*SimplexNoise.G3,C=m-u+2*SimplexNoise.G3,w=f-1+3*SimplexNoise.G3,T=y-1+3*SimplexNoise.G3,_=m-1+3*SimplexNoise.G3,E=255&c,R=255&l,P=255&p,L=SimplexNoise.permMod12[E+SimplexNoise.perm[R+SimplexNoise.perm[P]]],b=SimplexNoise.permMod12[E+n+SimplexNoise.perm[R+o+SimplexNoise.perm[P+s]]],I=SimplexNoise.permMod12[E+r+SimplexNoise.perm[R+a+SimplexNoise.perm[P+u]]],H=SimplexNoise.permMod12[E+1+SimplexNoise.perm[R+1+SimplexNoise.perm[P+1]]],O=.6-f*f-y*y-m*m,N=.6-g*g-M*M-x*x,j=.6-v*v-S*S-C*C,k=.6-w*w-T*T-_*_;return 32*((O<0?0:(O*=O)*O*SimplexNoise.dot(SimplexNoise.grad3[L],f,y,m))+(N<0?0:(N*=N)*N*SimplexNoise.dot(SimplexNoise.grad3[b],g,M,x))+(j<0?0:(j*=j)*j*SimplexNoise.dot(SimplexNoise.grad3[I],v,S,C))+(k<0?0:(k*=k)*k*SimplexNoise.dot(SimplexNoise.grad3[H],w,T,_)))},SimplexNoise.noise4d=function(t,e,i,n){var o,s,r,a,u,h,c,l,p,d,f,y,m=(t+e+i+n)*SimplexNoise.F4,g=SimplexNoise.fastFloor(t+m),M=SimplexNoise.fastFloor(e+m),x=SimplexNoise.fastFloor(i+m),v=SimplexNoise.fastFloor(n+m),S=(g+M+x+v)*SimplexNoise.G4,C=t-(g-S),w=e-(M-S),T=i-(x-S),_=n-(v-S),E=0,R=0,P=0,L=0;C>w?E++:R++,C>T?E++:P++,C>_?E++:L++,w>T?R++:P++,w>_?R++:L++,T>_?P++:L++,o=E>=3?1:0,s=R>=3?1:0,r=P>=3?1:0,a=L>=3?1:0,u=E>=2?1:0,h=R>=2?1:0,c=P>=2?1:0,l=L>=2?1:0,p=E>=1?1:0,d=R>=1?1:0,f=P>=1?1:0,y=L>=1?1:0;var b=C-o+SimplexNoise.G4,I=w-s+SimplexNoise.G4,H=T-r+SimplexNoise.G4,O=_-a+SimplexNoise.G4,N=C-u+2*SimplexNoise.G4,j=w-h+2*SimplexNoise.G4,k=T-c+2*SimplexNoise.G4,A=_-l+2*SimplexNoise.G4,D=C-p+3*SimplexNoise.G4,B=w-d+3*SimplexNoise.G4,U=T-f+3*SimplexNoise.G4,F=_-y+3*SimplexNoise.G4,G=C-1+4*SimplexNoise.G4,V=w-1+4*SimplexNoise.G4,z=T-1+4*SimplexNoise.G4,W=_-1+4*SimplexNoise.G4,X=255&g,Y=255&M,K=255&x,Z=255&v,q=SimplexNoise.perm[X+SimplexNoise.perm[Y+SimplexNoise.perm[K+SimplexNoise.perm[Z]]]]%32,Q=SimplexNoise.perm[X+o+SimplexNoise.perm[Y+s+SimplexNoise.perm[K+r+SimplexNoise.perm[Z+a]]]]%32,J=SimplexNoise.perm[X+u+SimplexNoise.perm[Y+h+SimplexNoise.perm[K+c+SimplexNoise.perm[Z+l]]]]%32,$=SimplexNoise.perm[X+p+SimplexNoise.perm[Y+d+SimplexNoise.perm[K+f+SimplexNoise.perm[Z+y]]]]%32,tt=SimplexNoise.perm[X+1+SimplexNoise.perm[Y+1+SimplexNoise.perm[K+1+SimplexNoise.perm[Z+1]]]]%32,et=.6-C*C-w*w-T*T-_*_,it=.6-b*b-I*I-H*H-O*O,nt=.6-N*N-j*j-k*k-A*A,ot=.6-D*D-B*B-U*U-F*F,st=.6-G*G-V*V-z*z-W*W;return 27*((et<0?0:(et*=et)*et*SimplexNoise.dot(SimplexNoise.grad4[q],C,w,T,_))+(it<0?0:(it*=it)*it*SimplexNoise.dot(SimplexNoise.grad4[Q],b,I,H,O))+(nt<0?0:(nt*=nt)*nt*SimplexNoise.dot(SimplexNoise.grad4[J],N,j,k,A))+(ot<0?0:(ot*=ot)*ot*SimplexNoise.dot(SimplexNoise.grad4[$],D,B,U,F))+(st<0?0:(st*=st)*st*SimplexNoise.dot(SimplexNoise.grad4[tt],G,V,z,W)))},SimplexNoise.grad3=[new n(1,1,0),new n(-1,1,0),new n(1,-1,0),new n(-1,-1,0),new n(1,0,1),new n(-1,0,1),new n(1,0,-1),new n(-1,0,-1),new n(0,1,1),new n(0,-1,1),new n(0,1,-1),new n(0,-1,-1)],SimplexNoise.grad4=[new n(0,1,1,1),new n(0,1,1,-1),new n(0,1,-1,1),new n(0,1,-1,-1),new n(0,-1,1,1),new n(0,-1,1,-1),new n(0,-1,-1,1),new n(0,-1,-1,-1),new n(1,0,1,1),new n(1,0,1,-1),new n(1,0,-1,1),new n(1,0,-1,-1),new n(-1,0,1,1),new n(-1,0,1,-1),new n(-1,0,-1,1),new n(-1,0,-1,-1),new n(1,1,0,1),new n(1,1,0,-1),new n(1,-1,0,1),new n(1,-1,0,-1),new n(-1,1,0,1),new n(-1,1,0,-1),new n(-1,-1,0,1),new n(-1,-1,0,-1),new n(1,1,1,0),new n(1,1,-1,0),new n(1,-1,1,0),new n(1,-1,-1,0),new n(-1,1,1,0),new n(-1,1,-1,0),new n(-1,-1,1,0),new n(-1,-1,-1,0)],SimplexNoise.p=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],SimplexNoise.perm=new Array(512),SimplexNoise.permMod12=new Array(512),SimplexNoise._constructor=function(){for(var t=0;t<512;t++)SimplexNoise.perm[t]=SimplexNoise.p[255&t],SimplexNoise.permMod12[t]=SimplexNoise.perm[t]%12}(),SimplexNoise.F2=.5*(Math.sqrt(3)-1),SimplexNoise.G2=(3-Math.sqrt(3))/6,SimplexNoise.F3=1/3,SimplexNoise.G3=1/6,SimplexNoise.F4=(Math.sqrt(5)-1)/4,SimplexNoise.G4=(5-Math.sqrt(5))/20,SimplexNoise}()},"./out/maths/Vector2.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Vector2",function(){return n});var n=function(){function Vector2(t,e){this.x=t,this.y=e}return Vector2.prototype.update=function(t,e){if(t instanceof Vector2)return this.x=t.x,void(this.y=t.y);this.x=t,this.y=e||this.y},Vector2.prototype.add=function(t){return new Vector2(this.x+t.x,this.y+t.y)},Vector2.prototype.subtract=function(t){return new Vector2(this.x-t.x,this.y-t.y)},Vector2.prototype.multiply=function(t){return new Vector2(this.x*t.x,this.y*t.y)},Vector2.prototype.multiplyNum=function(t){return new Vector2(this.x*t,this.y*t)},Vector2.prototype.divide=function(t){return new Vector2(this.x/t.x,this.y/t.y)},Vector2.prototype.divideNum=function(t){return new Vector2(this.x/t,this.y/t)},Vector2.prototype.getLength=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},Vector2.prototype.normalize=function(){return this.divideNum(this.getLength())},Vector2.prototype.cross=function(t){return this.x*t.y-this.y*t.x},Vector2.prototype.dot=function(t){return this.x*t.y+this.y*t.x},Vector2.prototype.inverse=function(){return new Vector2(-this.x,-this.y)},Vector2.prototype.setLength=function(t){this.update(this.multiplyNum(t/Math.sqrt(this.getLength())))},Vector2.prototype.modLength=function(t){this.update(this.multiplyNum(1+t/this.getLength()))},Vector2.prototype.distance=function(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))},Vector2.prototype.clone=function(){return new Vector2(this.x,this.y)},Vector2.prototype.toString=function(t){var e=String(this.x),i=String(this.y);return void 0!=t&&(e=this.x.toFixed(t),i=this.y.toFixed(t)),"("+e+", "+i+")"},Vector2.lerp=function(t,e,i){return t.multiplyNum(i).add(e.multiplyNum(1-i))},Vector2}()},"./out/maths/Vector3.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Vector3",function(){return n});var n=function(){function Vector3(t,e,i){this.x=t,this.y=e,this.z=i}return Vector3.prototype.update=function(t,e,i){if(t instanceof Vector3)return this.x=t.x,this.y=t.y,void(this.z=t.z);this.x=t,this.y=e||this.y,this.z=i||this.z},Vector3.prototype.add=function(t){return new Vector3(this.x+t.x,this.y+t.y,this.z+t.z)},Vector3.prototype.subtract=function(t){return new Vector3(this.x-t.x,this.y-t.y,this.z-t.z)},Vector3.prototype.multiply=function(t){return new Vector3(this.x*t.x,this.y*t.y,this.z*t.z)},Vector3.prototype.multiplyNum=function(t){return new Vector3(this.x*t,this.y*t,this.z*t)},Vector3.prototype.divide=function(t){return new Vector3(this.x/t.x,this.y/t.y,this.z/t.z)},Vector3.prototype.divideNum=function(t){return new Vector3(this.x/t,this.y/t,this.z/t)},Vector3.prototype.getLength=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},Vector3.prototype.setLength=function(t){this.update(this.multiplyNum(t/this.getLength()))},Vector3.prototype.modLength=function(t){this.update(this.multiplyNum(1+t/this.getLength()))},Vector3.prototype.normalize=function(){return this.divideNum(this.getLength())},Vector3.prototype.cross=function(t){return new Vector3(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)},Vector3.prototype.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z},Vector3.prototype.inverse=function(){return new Vector3(-this.x,-this.y,-this.z)},Vector3.prototype.clone=function(){return new Vector3(this.x,this.y,this.z)},Vector3.lerp=function(t,e,i){return t.multiplyNum(i).add(e.multiplyNum(1-i))},Vector3}()},"./out/physics/CollisionBounds.js":function(t,e,i){"use strict";i.r(e),i.d(e,"CollisionBounds",function(){return u});var n=i("./out/maths/Rectangle.js"),o=i("./out/physics/Ray.js"),s=i("./out/physics/RayPlacement.js"),r=i("./out/maths/Segment.js"),a=i("./out/maths/IntersectTypes.js"),u=function(){function CollisionBounds(t){this.rays=[],this.offX=0,this.offY=0,this.bounds=t?t.clone():new n.Rectangle(0,0);var e=this.bounds.x,i=this.bounds.y,r=this.bounds.width,a=this.bounds.height;this.rays.push(new o.Ray(e,i,-20,0,0,a-1,s.RayPlacement.LEFT)),this.rays.push(new o.Ray(e,i,-20,0,0,1,s.RayPlacement.LEFT)),this.rays.push(new o.Ray(e,i,0,20,1,a,s.RayPlacement.TOP)),this.rays.push(new o.Ray(e,i,0,20,r-1,a,s.RayPlacement.TOP)),this.rays.push(new o.Ray(e,i,20,0,r,1,s.RayPlacement.RIGHT)),this.rays.push(new o.Ray(e,i,20,0,r,a-1,s.RayPlacement.RIGHT)),this.rays.push(new o.Ray(e,i,0,-20,r-1,0,s.RayPlacement.BOTTOM)),this.rays.push(new o.Ray(e,i,0,-20,1,0,s.RayPlacement.BOTTOM)),this.rays.push(new o.Ray(e,i,-20,0,0,a/2,s.RayPlacement.LEFT)),this.rays.push(new o.Ray(e,i,0,20,r/2,a,s.RayPlacement.TOP)),this.rays.push(new o.Ray(e,i,20,0,r,a/2,s.RayPlacement.RIGHT)),this.rays.push(new o.Ray(e,i,0,-20,r/2,0,s.RayPlacement.BOTTOM))}return CollisionBounds.prototype.getBoundSegments=function(){var t=[],e=this.bounds,i=e.x,n=e.y;return t.push(new r.Segment(i,n+e.height,0,-e.height)),t.push(new r.Segment(i,n,e.width,0)),t.push(new r.Segment(i+e.width,n,0,e.height)),t.push(new r.Segment(i+e.width,n+e.height,-e.width,0)),t},CollisionBounds.prototype.updateData=function(t,e,i,n){t+=this.offX,e+=this.offY,this.bounds.x=t,this.bounds.y=e,this.rays.forEach(function(o){o.updatePos(t,e,i,n),o.resize(5)})},CollisionBounds.prototype.getCollisionData=function(t){for(var e=[],i=0;i<t.length;i++)for(var n=void 0,o=0;o<this.rays.length;o++)(n=this.rays[o].intersect(t[i])).type==a.IntersectTypes.DO_INTERSECT&&e.push(n);return e},CollisionBounds.prototype.getRaysOfType=function(t){var e=[];return this.rays.forEach(function(i){i.placement==t&&e.push(i)}),e},CollisionBounds.prototype.draw=function(t){t.strokeStyle="#000000",t.fillStyle="#dbff00",t.fillRect(this.bounds.x,this.bounds.y,this.bounds.width,this.bounds.height),this.rays.forEach(function(e){e.draw(t)})},CollisionBounds}()},"./out/physics/CollisionEvent.js":function(t,e,i){"use strict";i.r(e),i.d(e,"CollisionEvent",function(){return n});var n=function(){return function(t,e,i,n){this.parent=t,this.target=e,void 0!==i&&(this.type=i),void 0!==n&&(this.distance=n)}}()},"./out/physics/CollisionHandler.js":function(t,e,i){"use strict";i.r(e),i.d(e,"CollisionHandler",function(){return l});var n=i("./out/physics/CollisionBounds.js"),o=i("./out/physics/CollisionEvent.js"),s=i("./out/physics/Ray.js"),r=i("./out/maths/Segment.js"),a=i("./out/engine/Main.js"),u=i("./out/util/Utils.js"),h=i("./out/physics/RayPlacement.js"),c=i("./out/game/Character.js"),l=function(){function CollisionHandler(t){this.rayResize=-1,this.parent=t,this.collisionBounds=new n.CollisionBounds(t.getBounds())}return CollisionHandler.prototype.dispose=function(){this.parent.collisionHandler=void 0},CollisionHandler.prototype.draw=function(t){t.lineWidth=1,t.globalAlpha=.4,this.collisionBounds.draw(t),t.fillStyle="#ff0000",this.lastCollisionPoint&&this.lastCollisionPoint.draw(t),t.strokeStyle="#00ff00",this.parent.getCollisionHandler().collisionBounds.getBoundSegments().forEach(function(e){e.draw(t)})},CollisionHandler.prototype.resolveMovementCollision=function(){var t,e=this,i=Number(this.parent.vx*this.parent.timeMultiplier),n=Number(this.parent.vy*this.parent.timeMultiplier),l=1e8;if(this.collisionBounds.updateData(this.parent.x,this.parent.y,i,n),a.Main.worldStack.forEach(function(i){if(e.parent!==i&&i.solid&&i.visible&&i.collisionHandler){var n,o=i.getCollisionHandler();n=e.collisionBounds.getCollisionData(o.collisionBounds.getBoundSegments()),!t&&n.length>0&&(l=n[0].distance,t=n[0],e.collisionTarget=i);for(var s=0;s<n.length;s++)n[s].distance<l&&(l=n[s].distance,t=n[s],e.collisionTarget=i)}}),t){this.lastCollision=new o.CollisionEvent(this.parent,this.collisionTarget,t.parent.placement,l),this.lastCollisionPoint=t.intersection;var p=(M=t.parent).x-this.parent.x,d=M.y-this.parent.y;if(t.intersection){var f=new r.Segment(M.x,M.y,t.intersection.x-M.x,t.intersection.y-M.y);this.collisionSegment=f.clone(),f.resize(this.rayResize),this.parent.setX(f.x+f.vecX-p),this.parent.setY(f.y+f.vecY-d)}}else this.parent.modX(i),this.parent.modY(n);if(this.parent instanceof c.Character){if(l<.1-this.rayResize&&t&&t.parent instanceof s.Ray&&t.intersection){u.Utils.dif(this.parent.y,this.lastY)<.05&&this.parent.setVy(0);var y=t.parent.placement;switch(y){case h.RayPlacement.TOP:case h.RayPlacement.BOTTOM:this.parent.setVy(0),this.collisionSegment.vecY=t.parent.vecY;break;case h.RayPlacement.LEFT:case h.RayPlacement.RIGHT:this.parent.setVx(0),this.collisionSegment.vecX=t.parent.vecX}var m=new s.Ray(t.intersection.x,t.intersection.y,t.parent.vecX-this.collisionSegment.vecX,t.parent.vecY-this.collisionSegment.vecY,void 0,void 0,y),g=m.cast();if(g.closestCollision){this.lastCollisionPoint=t.intersection;var M;p=(M=g.closestCollision.parent).x-this.parent.x,d=M.y-this.parent.y;if(g.closestCollision.intersection){f=new r.Segment(M.x,M.y,g.closestCollision.intersection.x-M.x,g.closestCollision.intersection.y-M.y);this.parent.setX(f.x+f.vecX-p),this.parent.setY(f.y+f.vecY-d)}}else this.parent.modX(m.vecX),this.parent.modY(m.vecY)}this.isGrounded(1-this.rayResize)?(this.parent.onGround=!0,this.parent.setVy(0)):(this.parent.onGround=!1,this.parent.modVy(a.Main.gravity*this.parent.timeMultiplier))}this.parent instanceof c.Character&&this.parent.onGround&&this.collisionTarget&&this.parent.setVx(Math.abs(this.parent.vx)>.01?this.parent.vx*(1-this.collisionTarget.friction):0),this.lastX=Number(this.parent.x),this.lastY=Number(this.parent.y)},CollisionHandler.prototype.isGrounded=function(t){var e=!1;if(this.parent.vy>.05)return!1;for(var i=this.collisionBounds.getRaysOfType(h.RayPlacement.BOTTOM),n=0;n<i.length;n++){var o=i[n];o.parent=this.parent;var s=Number(o.vecX),r=Number(o.vecY);if(o.vecX=0,o.vecY=-t,e=!!o.cast().closestCollision,o.vecX=s,o.vecY=r,e)break}return e},CollisionHandler.prototype.tick=function(){},CollisionHandler}()},"./out/physics/CollisionType.js":function(t,e,i){"use strict";var n;i.r(e),i.d(e,"CollisionType",function(){return n}),function(t){t[t.LEFT=1]="LEFT",t[t.TOP=2]="TOP",t[t.RIGHT=3]="RIGHT",t[t.BOTTOM=4]="BOTTOM"}(n||(n={}))},"./out/physics/Ray.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Ray",function(){return h});var n,o=i("./out/maths/Segment.js"),s=i("./out/physics/RayCastResult.js"),r=i("./out/engine/Main.js"),a=i("./out/maths/IntersectTypes.js"),u=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function __(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}),h=function(t){function Ray(e,i,n,o,s,r,a,u){var h=t.call(this,e,i,n,o)||this;return h.offX=0,h.offY=0,h.ox=e,h.oy=i,void 0!==s&&(h.offX=s),void 0!==r&&(h.offY=r),void 0!==a&&(h.placement=a),u&&(h.parent=u),h.x=h.ox+h.offX,h.y=h.oy+h.offY,h}return u(Ray,t),Ray.prototype.updatePos=function(t,e,i,n){this.ox=t,this.oy=e,this.x=this.ox+this.offX,this.y=this.oy+this.offY,void 0!==i&&(this.vecX=i),void 0!==n&&(this.vecY=n)},Ray.prototype.cast=function(){var t=this,e=[],i=void 0,n=1e8;return r.Main.worldStack.forEach(function(o){if(o.solid&&o.visible&&o.collisionHandler&&(!t.parent||o!==t.parent)){var s,r=o.getCollisionHandler();s=t.getCollisionData(r.collisionBounds.getBoundSegments(),o),!i&&s.length>0&&(n=s[0].distance,i=s[0]);for(var a=0;a<s.length;a++)e.push(s[a]),s[a].distance<n&&(n=s[a].distance,i=s[a])}}),new s.RayCastResult(e,i)},Ray.prototype.getCollisionData=function(t,e){for(var i=[],n=0;n<t.length;n++){var o=this.intersect(t[n]);o.type==a.IntersectTypes.DO_INTERSECT&&(o.targetObject=e,i.push(o))}return i},Ray}(o.Segment)},"./out/physics/RayCastResult.js":function(t,e,i){"use strict";i.r(e),i.d(e,"RayCastResult",function(){return o});var n=i("./out/maths/Vector2.js"),o=function(){return function(t,e){if(this.collisions=t,e){this.closestCollision=e;var i=this.closestCollision.intersection,o=i.x-this.closestCollision.parent.x,s=i.y-this.closestCollision.parent.y;this.closestHitVector=new n.Vector2(o,s)}}}()},"./out/physics/RayPlacement.js":function(t,e,i){"use strict";var n;i.r(e),i.d(e,"RayPlacement",function(){return n}),function(t){t[t.BOTTOM_LEFT=1]="BOTTOM_LEFT",t[t.BOTTOM_RIGHT=2]="BOTTOM_RIGHT",t[t.TOP_LEFT=3]="TOP_LEFT",t[t.TOP_RIGHT=4]="TOP_RIGHT",t[t.LEFT=5]="LEFT",t[t.TOP=6]="TOP",t[t.RIGHT=7]="RIGHT",t[t.BOTTOM=8]="BOTTOM"}(n||(n={}))},"./out/util/Clipboard.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Clipboard",function(){return n});var n=function(){function Clipboard(){}return Clipboard.setCopyData=function(t){this.copyData=t},Clipboard.setPasteData=function(t){this.pasteData=t},Clipboard.getCopyData=function(){return this.copyData},Clipboard.getPasteData=function(){return this.pasteData},Clipboard.copyData="",Clipboard.pasteData="",Clipboard}()},"./out/util/Color.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Color",function(){return o});var n=i("./out/util/Utils.js"),o=function(){function Color(){}return Color.shadeColor=function(t,e){var i=parseInt(t.slice(1),16),n=e<0?0:255,o=e<0?-1*e:e,s=i>>16,r=i>>8&255,a=255&i;return"#"+(16777216+65536*(Math.round((n-s)*o)+s)+256*(Math.round((n-r)*o)+r)+(Math.round((n-a)*o)+a)).toString(16).slice(1)},Color.modColor=function(t,e){var i=parseInt(t.slice(1),16),o=i>>16,s=i>>8&255,r=255&i;return o=n.Utils.clamp(o+e,0,255),s=n.Utils.clamp(s+e,0,255),r=n.Utils.clamp(r+e,0,255),Color.rgbToHex(o,s,r)},Color.rgbToHex=function(t,e,i){return"#"+Color.intToHex(t)+Color.intToHex(e)+Color.intToHex(i)},Color.intToHex=function(t){var e=t.toString(16);return 1==e.length?"0"+e:e},Color.getLuminance=function(t){var e=parseInt(t.slice(1),16);return(299*(e>>16)+587*(e>>8&255)+114*(255&e))/1e3/255},Color}()},"./out/util/CssUtils.js":function(t,e,i){"use strict";i.r(e),i.d(e,"CssUtils",function(){return n});var n=function(){function CssUtils(){}return CssUtils.createStyleSheet=function(t,e){void 0===t&&(t="strum-2d-style");var i=document.createElement("style");return i.id=t.replace(/[.#]/,""),e&&i.classList.add(e),i.appendChild(document.createTextNode("")),document.head&&document.head.appendChild(i),i.sheet},CssUtils.styleExists=function(t){return void 0===t&&(t="#strum-2d-style"),null!=document.querySelector(t)},CssUtils.getStyleSheet=function(t,e){if(void 0===t&&(t="#strum-2d-style"),!this.styleExists(t))return this.createStyleSheet(t,e);var i=t;e&&(i+="."+e);var n=document.querySelector(i),o=null;return n&&(o=n.sheet),o},CssUtils.clearRule=function(t,e){void 0===t&&(t="#strum-2d-style");var i=this.getStyleSheet(t);if(i){for(var n=0;n<i.cssRules.length;n++)i.cssRules[n].selectorText==e&&i.removeRule(n);return i}},CssUtils}()},"./out/util/Handler.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Handler",function(){return r});var n=i("./out/util/MouseHandler.js"),o=i("./out/util/KeyHandler.js"),s=i("./out/physics/CollisionHandler.js"),r=function(){function Handler(t){this.parent=t}return Handler.prototype.getMouseHandler=function(){return this.mouseHandler||(this.mouseHandler=new n.MouseHandler(this.parent)),this.mouseHandler},Handler.prototype.getKeyHandler=function(){return this.keyHandler||(this.keyHandler=new o.KeyHandler),this.keyHandler},Handler.prototype.getCollisionHandler=function(){return this.collisionHandler||(this.collisionHandler=new s.CollisionHandler(this.parent)),this.collisionHandler},Handler}()},"./out/util/InitResources.js":function(t,e,i){"use strict";i.r(e),i.d(e,"initResources",function(){return initResources});var n=i("./out/game/ui/TextModule.js"),o=i("./out/engine/Main.js"),s=i("./out/util/Utils.js");function initResources(){var t=function(t){o.Main.stackMap(function(t){t instanceof n.TextModule&&t.updateDimensions()},!0)};s.Utils.loadFontFace("Roboto",_root+"/assets/strum-2d/fonts/Roboto-Regular.ttf",t),s.Utils.loadFontFace("Roboto Thin",_root+"/assets/strum-2d/fonts/Roboto-Thin.ttf",t),s.Utils.loadFontFace("Roboto Bold",_root+"/assets/strum-2d/fonts/Roboto-Bold.ttf",t),s.Utils.loadFontFace("Source Code Pro",_root+"/assets/strum-2d/fonts/SourceCodePro-Medium.ttf",t)}},"./out/util/Input.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Input",function(){return n});var n=function(){function Input(){this.keyState={},this.frozenKeyState={},this.caseSensitive=!1,this.locked=!1,this.mouseLeftDown=!1,this.mouseMiddleDown=!1,this.mouseRightDown=!1}return Input.prototype.tick=function(t){if("keydown"==t.type)this.keyState[t.key]=!0;else if("keyup"==t.type){var e=t.key.toLowerCase();this.keyState[e]=!1,e=e.toUpperCase(),this.keyState[e]=!1}else if("mousedown"==t.type)switch(t.button){case 0:this.mouseLeftDown=!0;break;case 1:this.mouseMiddleDown=!0;break;case 2:this.mouseRightDown=!0}else if("mouseup"==t.type)switch(t.button){case 0:this.mouseLeftDown=!1;break;case 1:this.mouseMiddleDown=!1;break;case 2:this.mouseRightDown=!1}},Input.prototype.isDown=function(t,e){var i=this.locked?this.frozenKeyState:this.keyState;if(this.caseSensitive||e)return!!i[t];var n=!1;return(n=i[t=t.toLowerCase()])||(n=i[t=t.toUpperCase()]),!!n},Input.prototype.setLock=function(t){this.locked=t,t&&(this.frozenKeyState=JSON.parse(JSON.stringify(this.keyState)))},Input}()},"./out/util/KeyHandler.js":function(t,e,i){"use strict";i.r(e),i.d(e,"KeyHandler",function(){return o});var n=i("./out/engine/Main.js"),o=function(){function KeyHandler(){this.enabled=!0}return KeyHandler.preventDefault=function(){n.Main.keyEvent&&(n.Main.keyEvent=void 0),n.Main.input.setLock(!0)},KeyHandler.prototype.setEnabled=function(t){this.enabled=t},KeyHandler.prototype.tick=function(t){this.enabled&&(t.keyPressed&&this.keyPressed&&!t.handled&&this.keyPressed(t.keyPressed),t.keyDown&&this.keyDown&&!t.handled&&this.keyDown(t.keyDown),t.keyUp&&this.keyUp&&!t.handled&&n.Main.input.isDown(t.keyUp.key,!0)&&this.keyUp(t.keyUp))},KeyHandler}()},"./out/util/MouseHandler.js":function(t,e,i){"use strict";i.r(e),i.d(e,"MouseHandler",function(){return d}),i.d(e,"MouseButton",function(){return n}),i.d(e,"Cursor",function(){return o});var n,o,s=i("./out/game/Entity.js"),r=i("./out/maths/Point.js"),a=i("./out/util/Utils.js"),u=i("./out/engine/Main.js"),h=i("./out/util/MouseMoveEvent.js"),c=i("./out/game/ui/Composite.js"),l=i("./out/game/ui/Layout.js"),p=i("./out/maths/Vector2.js"),d=function(){function MouseHandler(t){this.mouseOver=!1,this.mouseLeftDragging=!1,this.mouseMiddleDragging=!1,this.mouseRightDragging=!1,this.originLeft=new p.Vector2(0,0),this.originMiddle=new p.Vector2(0,0),this.originRight=new p.Vector2(0,0),this.parent=t}return MouseHandler.setCursor=function(t){u.Main.canvas.style.cursor=t},MouseHandler.preventDefault=function(){u.Main.mouseEvent&&(u.Main.mouseEvent=void 0)},MouseHandler.prototype.dispose=function(){this.parent.mouseHandler=void 0},MouseHandler.prototype.getRelevantMousePos=function(t,e){var i=e?e.preferredCoordSpace:this.parent.preferredCoordSpace;return i==s.CoordSpace.CAMERA_SPACE?a.Utils.toCanvasPos(new r.Point(t.x,t.y)):i==s.CoordSpace.WORLD_SPACE?a.Utils.toWorldPos(a.Utils.toCanvasPos(new r.Point(t.x,t.y))):new p.Vector2(t.x,t.y)},MouseHandler.prototype.getDraggingButtons=function(){var t=[];return this.mouseLeftDragging&&t.push(n.MOUSE_LEFT),this.mouseMiddleDragging&&t.push(n.MOUSE_MIDDLE),this.mouseRightDragging&&t.push(n.MOUSE_RIGHT),t},MouseHandler.prototype.getDragOrigins=function(){var t=[];return this.mouseLeftDragging&&t.push(this.originLeft),this.mouseMiddleDragging&&t.push(this.originMiddle),this.mouseRightDragging&&t.push(this.originRight),t},MouseHandler.prototype.isObstructed=function(t){var e=this,i=!1,n={},o=function(r){if(r instanceof c.Composite&&r.visible&&!(r instanceof l.Layout))try{r.stack.forEach(o)}catch(t){throw t}else if(r!==e.parent&&r.visible&&(r.z>e.parent.z||r.preferredCoordSpace==s.CoordSpace.CAMERA_SPACE&&e.parent.preferredCoordSpace==s.CoordSpace.WORLD_SPACE)&&(i=r.getBounds().contains(e.getRelevantMousePos(t,r))))throw n};try{u.Main.uiStack.forEach(o),this.parent.preferredCoordSpace==s.CoordSpace.WORLD_SPACE&&u.Main.worldStack.forEach(o)}catch(t){}return i},MouseHandler.prototype.tick=function(t){var e;if(t.mouseMove&&(e=this.getRelevantMousePos(t.mouseMove),this.parent.getBounds().contains(e)&&!this.isObstructed(t.mouseMove)?this.mouseOver||(this.mouseOver=!0,this.mouseEntered&&this.mouseEntered(e)):this.mouseOver&&(this.mouseOver=!1,this.mouseExited&&this.mouseExited(e)),(this.mouseLeftDragging||this.mouseMiddleDragging||this.mouseRightDragging)&&this.mouseDragging&&this.mouseDragging(new h.MouseMoveEvent(this.getDragOrigins(),e,this.mouseOver,this.getDraggingButtons()))),t.mouseDown)if(e=this.getRelevantMousePos(t.mouseDown),this.parent.getBounds().contains(e))switch(t.mouseDown.button){case n.MOUSE_LEFT:this.mouseLeftDown&&this.mouseLeftDown(e),this.mouseLeftDragging=!0,this.originLeft=e;break;case n.MOUSE_MIDDLE:this.mouseMiddleDown&&this.mouseMiddleDown(e),this.mouseMiddleDragging=!0,this.originMiddle=e;break;case n.MOUSE_RIGHT:this.mouseRightDown&&this.mouseRightDown(e),this.mouseRightDragging=!0,this.originRight=e}else this.mouseDownOffBounds&&this.mouseDownOffBounds(e);if(t.mouseUp){if(e=this.getRelevantMousePos(t.mouseUp),this.parent.getBounds().contains(e))switch(t.mouseUp.button){case n.MOUSE_LEFT:this.mouseLeftUp&&this.mouseLeftUp(e);break;case n.MOUSE_MIDDLE:this.mouseMiddleUp&&this.mouseMiddleUp(e);break;case n.MOUSE_RIGHT:this.mouseRightUp&&this.mouseRightUp(e)}switch(t.mouseUp.button){case n.MOUSE_LEFT:this.mouseLeftDragging=!1;break;case n.MOUSE_MIDDLE:this.mouseMiddleDragging=!1;break;case n.MOUSE_RIGHT:this.mouseRightDragging=!1}}},MouseHandler}();!function(t){t[t.MOUSE_LEFT=0]="MOUSE_LEFT",t[t.MOUSE_MIDDLE=1]="MOUSE_MIDDLE",t[t.MOUSE_RIGHT=2]="MOUSE_RIGHT"}(n||(n={})),function(t){t.ALIAS="alias",t.ALL_SCROLL="all-scroll",t.AUTO="auto",t.CELL="cell",t.CONTEXT_MENU="context-menu",t.COL_RESIZE="col-resize",t.COPY="copy",t.CROSSHAIR="crosshair",t.DEFAULT="default",t.E_RESIZE="e-resize",t.EW_RESIZE="ew-resize",t.GRAB="grab",t.GRABBING="grabbing",t.HELP="help",t.MOVE="move",t.N_RESIZE="n-resize",t.NE_RESIZE="ne-resize",t.NESW_RESIZE="nesw-resize",t.NS_RESIZE="ns-resize",t.NW_RESIZE="nw-resize",t.NWSE_RESIZE="nwse-resize",t.NO_DROP="no-drop",t.NONE="none",t.NOT_ALLOWED="not-allowed",t.POINTER="pointer",t.PROGRESS="progress",t.ROW_RESIZE="row-resize",t.S_RESIZE="s-resize",t.SE_RESIZE="se-resize",t.SW_RESIZE="sw-resize",t.TEXT="text",t.URL="url",t.W_RESIZE="w-resize",t.WAIT="wait",t.ZOOM_IN="zoom-in",t.ZOOM_OUT="zoom-out"}(o||(o={}))},"./out/util/MouseMoveEvent.js":function(t,e,i){"use strict";i.r(e),i.d(e,"MouseMoveEvent",function(){return n});var n=function(){return function(t,e,i,n){this.origins=t,this.point=e,this.inBounds=i,this.buttons=n}}()},"./out/util/MultiKeyEvent.js":function(t,e,i){"use strict";i.r(e),i.d(e,"MultiKeyEvent",function(){return n});var n=function(){return function(t,e,i){this.handled=!1,t&&(this.keyPressed=t),e&&(this.keyDown=e),i&&(this.keyUp=i)}}()},"./out/util/MultiMouseEvent.js":function(t,e,i){"use strict";i.r(e),i.d(e,"MultiMouseEvent",function(){return n});var n=function(){return function(t,e,i){t&&(this.mouseMove=t),e&&(this.mouseDown=e),i&&(this.mouseUp=i)}}()},"./out/util/Utils.js":function(t,e,i){"use strict";i.r(e),i.d(e,"Utils",function(){return u});var n=i("./out/maths/Point.js"),o=i("./out/engine/Main.js"),s=i("./out/maths/Vector2.js"),r=i("./out/maths/Segment.js"),a=i("./out/util/CssUtils.js"),u=function(){function Utils(){}return Utils.toRadians=function(t){return t*Math.PI/180},Utils.toDegrees=function(t){return 180*t/Math.PI},Utils.dif=function(t,e){return Math.abs(t-e)},Utils.getMousePos=function(){return new n.Point(Utils.mouseX,Utils.mouseY)},Utils.toWorldPos=function(t){t.x=(t.x-o.Main.CANVAS_WIDTH/2)/o.Main.camera.hScale,t.y=(-t.y+o.Main.CANVAS_HEIGHT/2)/o.Main.camera.vScale;var e=Utils.getInverseRotatedPos(o.Main.camera.getPos()),i=Utils.getInverseRotatedPos(t);return i.x+=e.x/o.Main.camera.hScale,i.y+=e.y/o.Main.camera.vScale,i},Utils.toCameraPos=function(t){var e=Utils.getInverseRotatedPos(o.Main.camera.getPos());t.x-=e.x/o.Main.camera.hScale,t.y-=e.y/o.Main.camera.vScale;var i=Utils.getRotatedPos(t);return i.x=i.x*o.Main.camera.hScale+o.Main.CANVAS_WIDTH/2,i.y=-(i.y*o.Main.camera.vScale-o.Main.CANVAS_HEIGHT/2),i},Utils.getWorldPos=function(){return Utils.toWorldPos(Utils.getMousePos())},Utils.toCanvasPos=function(t){var e=t.x-o.Main.canvas.offsetLeft+o.Main.canvas.width/2,i=t.y-o.Main.canvas.offsetTop+o.Main.canvas.height/2;return new s.Vector2(e,i)},Utils.clamp=function(t,e,i){return t<e?e:t>i?i:t},Utils.rangeIntersect=function(t,e,i,n){return Math.max(t,e)>=Math.min(i,n)&&Math.min(t,e)<=Math.max(i,n)},Utils.sameSign=function(t,e){return t*e>=0},Utils.vecToDeg=function(t){return Utils.toDegrees(Math.atan2(t.y,t.x))},Utils.degToVec=function(t){var e=t*(Math.PI/180),i=Math.cos(e),n=Math.sin(e),o=new r.Segment(0,0,i,n).getNormal().getUnit();return new s.Vector2(o.vecX,o.vecY)},Utils.lerp=function(t,e,i){return(1-i)*t+i*e},Utils.getRotatedPos=function(t){var e=-t.y*-o.Main.camera.sinRot+t.x*o.Main.camera.cosRot,i=t.y*o.Main.camera.cosRot+t.x*-o.Main.camera.sinRot;return new s.Vector2(e,i)},Utils.getInverseRotatedPos=function(t){var e=-t.y*o.Main.camera.sinRot+t.x*o.Main.camera.cosRot,i=t.y*o.Main.camera.cosRot+t.x*o.Main.camera.sinRot;return new s.Vector2(e,i)},Utils.rotatePos=function(t,e){var i=Utils.toRadians(e),n=Math.sin(i),o=Math.cos(i),r=-t.y*-n+t.x*o,a=t.y*o+t.x*-n;return new s.Vector2(r,a)},Utils.spliceFirst=function(t){return t.splice(0,1)[0]},Utils.spliceLast=function(t){return t.splice(t.length-1,1)[0]},Utils.logisticProgression=function(t,e,i){var n=1/(1+e*Math.pow(Math.E,-i*(t-.5)*2)),o=1/(1+e*Math.pow(Math.E,-i));return n+(1-o)-(1/(1+e*Math.pow(Math.E,i))+(1-o))*(1-t)},Utils.cubicBezier=function(t,e,i,o,s){void 0===o&&(o=new n.Point(0,0)),void 0===s&&(s=new n.Point(1,1));var r=new n.Point((1-t)*o.x+t*e.x,(1-t)*o.y+t*e.y),a=new n.Point((1-t)*e.x+t*i.x,(1-t)*e.y+t*i.y),u=new n.Point((1-t)*i.x+t*s.x,(1-t)*i.y+t*s.y),h=new n.Point((1-t)*r.x+t*a.x,(1-t)*r.y+t*a.y),c=new n.Point((1-t)*a.x+t*u.x,(1-t)*a.y+t*u.y);return new n.Point((1-t)*h.x+t*c.x,(1-t)*h.y+t*c.y).y},Utils.cutStr=function(t,e,i){return t.substr(0,e)+t.substr(e+i)},Utils.cutString=function(t,e,i){return t.substr(0,e)+t.substr(i)},Utils.loadFont=function(t,e,i){var n=a.CssUtils.getStyleSheet("#strum-2d-fonts");n&&(i||(i={fontStyle:"normal",fontWeight:"400"}),n.insertRule("@font-face {\n\t\t\t\t\tfont-family: '"+t+"';\n\t\t\t\t\tfont-style: "+i.fontStyle+";\n\t\t\t\t\tfont-weight: "+i.fontWeight+";\n\t\t\t\t\tsrc: url("+e+");\n\t\t\t\t}"))},Utils.loadFontFace=function(t,e,i){if(!window.FontFace)return console.info("Your browser does not support the FontFace API. Falling back to CSS injection. Please use either Chrome or Firefox."),Utils.loadFont(t,e);var n=new FontFace(t,"url("+e+")");document.fonts.add(n),n.loaded.then(function(t){console.log("Font '"+t.family+"' loaded successfully."),i&&i(t)}),n.load()},Utils.fmod=function(t,e){return Number((t-Math.floor(t/e)*e).toPrecision(8))},Utils.mouseX=0,Utils.mouseY=0,Utils}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,